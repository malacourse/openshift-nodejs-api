/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: v3.6.173.0.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComGithubOpenshiftOriginPkgBuildApisBuildV1Build from '../mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build';
import ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig from '../mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig';
import ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfigList from '../mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfigList';
import ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildList from '../mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildList';
import ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildLog from '../mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildLog';
import ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildRequest from '../mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildRequest';
import IoK8sApimachineryPkgApisMetaV1APIResourceList from '../mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList';
import IoK8sApimachineryPkgApisMetaV1DeleteOptions from '../mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions';
import IoK8sApimachineryPkgApisMetaV1Patch from '../mikespgk/IoK8sApimachineryPkgApisMetaV1Patch';
import IoK8sApimachineryPkgApisMetaV1Status from '../mikespgk/IoK8sApimachineryPkgApisMetaV1Status';
import IoK8sApimachineryPkgApisMetaV1WatchEvent from '../mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent';

/**
* BuildOpenshiftIoV1 service.
* @module api/BuildOpenshiftIoV1Api
* @version v3.6.173.0.21
*/
export default class BuildOpenshiftIoV1Api {

    /**
    * Constructs a new BuildOpenshiftIoV1Api. 
    * @alias module:api/BuildOpenshiftIoV1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the connectBuildOpenshiftIoV1PostNamespacedBinaryBuildRequestOptionsInstantiatebinary operation.
     * @callback module:api/BuildOpenshiftIoV1Api~connectBuildOpenshiftIoV1PostNamespacedBinaryBuildRequestOptionsInstantiatebinaryCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to instantiatebinary of BinaryBuildRequestOptions
     * @param {String} name name of the BinaryBuildRequestOptions
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.asFile asFile determines if the binary should be created as a file within the source rather than extracted as an archive
     * @param {String} opts.revisionAuthorEmail revision.authorEmail of the source control user
     * @param {String} opts.revisionAuthorName revision.authorName of the source control user
     * @param {String} opts.revisionCommit revision.commit is the value identifying a specific commit
     * @param {String} opts.revisionCommitterEmail revision.committerEmail of the source control user
     * @param {String} opts.revisionCommitterName revision.committerName of the source control user
     * @param {String} opts.revisionMessage revision.message is the description of a specific commit
     * @param {module:api/BuildOpenshiftIoV1Api~connectBuildOpenshiftIoV1PostNamespacedBinaryBuildRequestOptionsInstantiatebinaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    connectBuildOpenshiftIoV1PostNamespacedBinaryBuildRequestOptionsInstantiatebinary(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling connectBuildOpenshiftIoV1PostNamespacedBinaryBuildRequestOptionsInstantiatebinary");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling connectBuildOpenshiftIoV1PostNamespacedBinaryBuildRequestOptionsInstantiatebinary");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'asFile': opts['asFile'],
        'revision.authorEmail': opts['revisionAuthorEmail'],
        'revision.authorName': opts['revisionAuthorName'],
        'revision.commit': opts['revisionCommit'],
        'revision.committerEmail': opts['revisionCommitterEmail'],
        'revision.committerName': opts['revisionCommitterName'],
        'revision.message': opts['revisionMessage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['*/*'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}/instantiatebinary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectBuildOpenshiftIoV1PostNamespacedBuildWebhooks operation.
     * @callback module:api/BuildOpenshiftIoV1Api~connectBuildOpenshiftIoV1PostNamespacedBuildWebhooksCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to webhooks of Build
     * @param {String} name name of the Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/BuildOpenshiftIoV1Api~connectBuildOpenshiftIoV1PostNamespacedBuildWebhooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    connectBuildOpenshiftIoV1PostNamespacedBuildWebhooks(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling connectBuildOpenshiftIoV1PostNamespacedBuildWebhooks");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling connectBuildOpenshiftIoV1PostNamespacedBuildWebhooks");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['*/*'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectBuildOpenshiftIoV1PostNamespacedBuildWebhooksWithPath operation.
     * @callback module:api/BuildOpenshiftIoV1Api~connectBuildOpenshiftIoV1PostNamespacedBuildWebhooksWithPathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * connect POST requests to webhooks of Build
     * @param {String} name name of the Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {String} path path to the resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.path2 Path is the URL path to use for the current proxy request to pod.
     * @param {module:api/BuildOpenshiftIoV1Api~connectBuildOpenshiftIoV1PostNamespacedBuildWebhooksWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    connectBuildOpenshiftIoV1PostNamespacedBuildWebhooksWithPath(name, namespace, path, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling connectBuildOpenshiftIoV1PostNamespacedBuildWebhooksWithPath");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling connectBuildOpenshiftIoV1PostNamespacedBuildWebhooksWithPath");
      }

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling connectBuildOpenshiftIoV1PostNamespacedBuildWebhooksWithPath");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace,
        'path': path
      };
      let queryParams = {
        'path': opts['path2']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['*/*'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}/webhooks/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBuildOpenshiftIoV1BuildConfigForAllNamespaces operation.
     * @callback module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1BuildConfigForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a BuildConfig
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1BuildConfigForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig}
     */
    createBuildOpenshiftIoV1BuildConfigForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBuildOpenshiftIoV1BuildConfigForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/buildconfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBuildOpenshiftIoV1BuildForAllNamespaces operation.
     * @callback module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1BuildForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Build
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1BuildForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build}
     */
    createBuildOpenshiftIoV1BuildForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBuildOpenshiftIoV1BuildForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1Build;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/builds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBuildOpenshiftIoV1NamespacedBuild operation.
     * @callback module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1NamespacedBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1NamespacedBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build}
     */
    createBuildOpenshiftIoV1NamespacedBuild(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createBuildOpenshiftIoV1NamespacedBuild");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBuildOpenshiftIoV1NamespacedBuild");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1Build;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/builds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBuildOpenshiftIoV1NamespacedBuildConfig operation.
     * @callback module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1NamespacedBuildConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a BuildConfig
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1NamespacedBuildConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig}
     */
    createBuildOpenshiftIoV1NamespacedBuildConfig(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createBuildOpenshiftIoV1NamespacedBuildConfig");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBuildOpenshiftIoV1NamespacedBuildConfig");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBuildOpenshiftIoV1NamespacedBuildRequestClone operation.
     * @callback module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1NamespacedBuildRequestCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create clone of a BuildRequest
     * @param {String} name name of the BuildRequest
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1NamespacedBuildRequestCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildRequest}
     */
    createBuildOpenshiftIoV1NamespacedBuildRequestClone(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createBuildOpenshiftIoV1NamespacedBuildRequestClone");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createBuildOpenshiftIoV1NamespacedBuildRequestClone");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBuildOpenshiftIoV1NamespacedBuildRequestClone");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildRequest;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBuildOpenshiftIoV1NamespacedBuildRequestInstantiate operation.
     * @callback module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1NamespacedBuildRequestInstantiateCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create instantiate of a BuildRequest
     * @param {String} name name of the BuildRequest
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BuildOpenshiftIoV1Api~createBuildOpenshiftIoV1NamespacedBuildRequestInstantiateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildRequest}
     */
    createBuildOpenshiftIoV1NamespacedBuildRequestInstantiate(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createBuildOpenshiftIoV1NamespacedBuildRequestInstantiate");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createBuildOpenshiftIoV1NamespacedBuildRequestInstantiate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBuildOpenshiftIoV1NamespacedBuildRequestInstantiate");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildRequest;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}/instantiate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBuildOpenshiftIoV1CollectionNamespacedBuild operation.
     * @callback module:api/BuildOpenshiftIoV1Api~deleteBuildOpenshiftIoV1CollectionNamespacedBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~deleteBuildOpenshiftIoV1CollectionNamespacedBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteBuildOpenshiftIoV1CollectionNamespacedBuild(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteBuildOpenshiftIoV1CollectionNamespacedBuild");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/builds', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfig operation.
     * @callback module:api/BuildOpenshiftIoV1Api~deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of BuildConfig
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfig(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteBuildOpenshiftIoV1CollectionNamespacedBuildConfig");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBuildOpenshiftIoV1NamespacedBuild operation.
     * @callback module:api/BuildOpenshiftIoV1Api~deleteBuildOpenshiftIoV1NamespacedBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Build
     * @param {String} name name of the Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/BuildOpenshiftIoV1Api~deleteBuildOpenshiftIoV1NamespacedBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteBuildOpenshiftIoV1NamespacedBuild(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteBuildOpenshiftIoV1NamespacedBuild");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteBuildOpenshiftIoV1NamespacedBuild");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteBuildOpenshiftIoV1NamespacedBuild");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBuildOpenshiftIoV1NamespacedBuildConfig operation.
     * @callback module:api/BuildOpenshiftIoV1Api~deleteBuildOpenshiftIoV1NamespacedBuildConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a BuildConfig
     * @param {String} name name of the BuildConfig
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/BuildOpenshiftIoV1Api~deleteBuildOpenshiftIoV1NamespacedBuildConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteBuildOpenshiftIoV1NamespacedBuildConfig(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteBuildOpenshiftIoV1NamespacedBuildConfig");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteBuildOpenshiftIoV1NamespacedBuildConfig");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteBuildOpenshiftIoV1NamespacedBuildConfig");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuildOpenshiftIoV1APIResources operation.
     * @callback module:api/BuildOpenshiftIoV1Api~getBuildOpenshiftIoV1APIResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get available resources
     * @param {module:api/BuildOpenshiftIoV1Api~getBuildOpenshiftIoV1APIResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList}
     */
    getBuildOpenshiftIoV1APIResources(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1APIResourceList;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuildOpenshiftIoV1BuildConfigForAllNamespaces operation.
     * @callback module:api/BuildOpenshiftIoV1Api~listBuildOpenshiftIoV1BuildConfigForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfigList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind BuildConfig
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~listBuildOpenshiftIoV1BuildConfigForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfigList}
     */
    listBuildOpenshiftIoV1BuildConfigForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfigList;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/buildconfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuildOpenshiftIoV1BuildForAllNamespaces operation.
     * @callback module:api/BuildOpenshiftIoV1Api~listBuildOpenshiftIoV1BuildForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Build
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~listBuildOpenshiftIoV1BuildForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildList}
     */
    listBuildOpenshiftIoV1BuildForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildList;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuildOpenshiftIoV1NamespacedBuild operation.
     * @callback module:api/BuildOpenshiftIoV1Api~listBuildOpenshiftIoV1NamespacedBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~listBuildOpenshiftIoV1NamespacedBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildList}
     */
    listBuildOpenshiftIoV1NamespacedBuild(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listBuildOpenshiftIoV1NamespacedBuild");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildList;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuildOpenshiftIoV1NamespacedBuildConfig operation.
     * @callback module:api/BuildOpenshiftIoV1Api~listBuildOpenshiftIoV1NamespacedBuildConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfigList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind BuildConfig
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~listBuildOpenshiftIoV1NamespacedBuildConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfigList}
     */
    listBuildOpenshiftIoV1NamespacedBuildConfig(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listBuildOpenshiftIoV1NamespacedBuildConfig");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfigList;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBuildOpenshiftIoV1NamespacedBuild operation.
     * @callback module:api/BuildOpenshiftIoV1Api~patchBuildOpenshiftIoV1NamespacedBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Build
     * @param {String} name name of the Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BuildOpenshiftIoV1Api~patchBuildOpenshiftIoV1NamespacedBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build}
     */
    patchBuildOpenshiftIoV1NamespacedBuild(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchBuildOpenshiftIoV1NamespacedBuild");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchBuildOpenshiftIoV1NamespacedBuild");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchBuildOpenshiftIoV1NamespacedBuild");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1Build;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBuildOpenshiftIoV1NamespacedBuildConfig operation.
     * @callback module:api/BuildOpenshiftIoV1Api~patchBuildOpenshiftIoV1NamespacedBuildConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified BuildConfig
     * @param {String} name name of the BuildConfig
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BuildOpenshiftIoV1Api~patchBuildOpenshiftIoV1NamespacedBuildConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig}
     */
    patchBuildOpenshiftIoV1NamespacedBuildConfig(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchBuildOpenshiftIoV1NamespacedBuildConfig");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchBuildOpenshiftIoV1NamespacedBuildConfig");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchBuildOpenshiftIoV1NamespacedBuildConfig");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readBuildOpenshiftIoV1NamespacedBuild operation.
     * @callback module:api/BuildOpenshiftIoV1Api~readBuildOpenshiftIoV1NamespacedBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Build
     * @param {String} name name of the Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/BuildOpenshiftIoV1Api~readBuildOpenshiftIoV1NamespacedBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build}
     */
    readBuildOpenshiftIoV1NamespacedBuild(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readBuildOpenshiftIoV1NamespacedBuild");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readBuildOpenshiftIoV1NamespacedBuild");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1Build;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readBuildOpenshiftIoV1NamespacedBuildConfig operation.
     * @callback module:api/BuildOpenshiftIoV1Api~readBuildOpenshiftIoV1NamespacedBuildConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified BuildConfig
     * @param {String} name name of the BuildConfig
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/BuildOpenshiftIoV1Api~readBuildOpenshiftIoV1NamespacedBuildConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig}
     */
    readBuildOpenshiftIoV1NamespacedBuildConfig(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readBuildOpenshiftIoV1NamespacedBuildConfig");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readBuildOpenshiftIoV1NamespacedBuildConfig");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readBuildOpenshiftIoV1NamespacedBuildLogLog operation.
     * @callback module:api/BuildOpenshiftIoV1Api~readBuildOpenshiftIoV1NamespacedBuildLogLogCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read log of the specified BuildLog
     * @param {String} name name of the BuildLog
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.container cointainer for which to stream logs. Defaults to only container if there is one container in the pod.
     * @param {Boolean} opts.follow follow if true indicates that the build log should be streamed until the build terminates.
     * @param {Number} opts.limitBytes limitBytes, If set, is the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
     * @param {Boolean} opts.nowait noWait if true causes the call to return immediately even if the build is not available yet. Otherwise the server will wait until the build has started.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.previous previous returns previous build logs. Defaults to false.
     * @param {Number} opts.sinceSeconds sinceSeconds is a relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
     * @param {Number} opts.tailLines tailLines, If set, is the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
     * @param {Boolean} opts.timestamps timestamps, If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
     * @param {Number} opts.version version of the build for which to view logs.
     * @param {module:api/BuildOpenshiftIoV1Api~readBuildOpenshiftIoV1NamespacedBuildLogLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildLog}
     */
    readBuildOpenshiftIoV1NamespacedBuildLogLog(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readBuildOpenshiftIoV1NamespacedBuildLogLog");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readBuildOpenshiftIoV1NamespacedBuildLogLog");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'container': opts['container'],
        'follow': opts['follow'],
        'limitBytes': opts['limitBytes'],
        'nowait': opts['nowait'],
        'pretty': opts['pretty'],
        'previous': opts['previous'],
        'sinceSeconds': opts['sinceSeconds'],
        'tailLines': opts['tailLines'],
        'timestamps': opts['timestamps'],
        'version': opts['version']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildLog;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBuildOpenshiftIoV1NamespacedBuild operation.
     * @callback module:api/BuildOpenshiftIoV1Api~replaceBuildOpenshiftIoV1NamespacedBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Build
     * @param {String} name name of the Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BuildOpenshiftIoV1Api~replaceBuildOpenshiftIoV1NamespacedBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build}
     */
    replaceBuildOpenshiftIoV1NamespacedBuild(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceBuildOpenshiftIoV1NamespacedBuild");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceBuildOpenshiftIoV1NamespacedBuild");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceBuildOpenshiftIoV1NamespacedBuild");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1Build;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBuildOpenshiftIoV1NamespacedBuildConfig operation.
     * @callback module:api/BuildOpenshiftIoV1Api~replaceBuildOpenshiftIoV1NamespacedBuildConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified BuildConfig
     * @param {String} name name of the BuildConfig
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BuildOpenshiftIoV1Api~replaceBuildOpenshiftIoV1NamespacedBuildConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig}
     */
    replaceBuildOpenshiftIoV1NamespacedBuildConfig(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceBuildOpenshiftIoV1NamespacedBuildConfig");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceBuildOpenshiftIoV1NamespacedBuildConfig");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceBuildOpenshiftIoV1NamespacedBuildConfig");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildConfig;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceBuildOpenshiftIoV1NamespacedBuildDetails operation.
     * @callback module:api/BuildOpenshiftIoV1Api~replaceBuildOpenshiftIoV1NamespacedBuildDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace details of the specified Build
     * @param {String} name name of the Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/BuildOpenshiftIoV1Api~replaceBuildOpenshiftIoV1NamespacedBuildDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1Build}
     */
    replaceBuildOpenshiftIoV1NamespacedBuildDetails(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceBuildOpenshiftIoV1NamespacedBuildDetails");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceBuildOpenshiftIoV1NamespacedBuildDetails");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceBuildOpenshiftIoV1NamespacedBuildDetails");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgBuildApisBuildV1Build;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/namespaces/{namespace}/builds/{name}/details', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBuildOpenshiftIoV1BuildConfigListForAllNamespaces operation.
     * @callback module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1BuildConfigListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of BuildConfig
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1BuildConfigListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchBuildOpenshiftIoV1BuildConfigListForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/watch/buildconfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBuildOpenshiftIoV1BuildListForAllNamespaces operation.
     * @callback module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1BuildListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Build
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1BuildListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchBuildOpenshiftIoV1BuildListForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/watch/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBuildOpenshiftIoV1NamespacedBuild operation.
     * @callback module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1NamespacedBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Build
     * @param {String} name name of the Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1NamespacedBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchBuildOpenshiftIoV1NamespacedBuild(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling watchBuildOpenshiftIoV1NamespacedBuild");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchBuildOpenshiftIoV1NamespacedBuild");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/watch/namespaces/{namespace}/builds/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBuildOpenshiftIoV1NamespacedBuildConfig operation.
     * @callback module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1NamespacedBuildConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind BuildConfig
     * @param {String} name name of the BuildConfig
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1NamespacedBuildConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchBuildOpenshiftIoV1NamespacedBuildConfig(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling watchBuildOpenshiftIoV1NamespacedBuildConfig");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchBuildOpenshiftIoV1NamespacedBuildConfig");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/watch/namespaces/{namespace}/buildconfigs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBuildOpenshiftIoV1NamespacedBuildConfigList operation.
     * @callback module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1NamespacedBuildConfigListCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of BuildConfig
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1NamespacedBuildConfigListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchBuildOpenshiftIoV1NamespacedBuildConfigList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchBuildOpenshiftIoV1NamespacedBuildConfigList");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/watch/namespaces/{namespace}/buildconfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchBuildOpenshiftIoV1NamespacedBuildList operation.
     * @callback module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1NamespacedBuildListCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Build
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/BuildOpenshiftIoV1Api~watchBuildOpenshiftIoV1NamespacedBuildListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchBuildOpenshiftIoV1NamespacedBuildList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchBuildOpenshiftIoV1NamespacedBuildList");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/build.openshift.io/v1/watch/namespaces/{namespace}/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
