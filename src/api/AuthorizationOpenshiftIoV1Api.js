/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: v3.6.173.0.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBindingList from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBindingList';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyList from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyList';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBindingList from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBindingList';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleList from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleList';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalResourceAccessReview from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalResourceAccessReview';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalSubjectAccessReview from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalSubjectAccessReview';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBindingList from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBindingList';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyList from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyList';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ResourceAccessReview from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ResourceAccessReview';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingList from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingList';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestrictionList from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestrictionList';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleList from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleList';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SelfSubjectRulesReview from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SelfSubjectRulesReview';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectAccessReview from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectAccessReview';
import ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectRulesReview from '../mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectRulesReview';
import IoK8sApimachineryPkgApisMetaV1APIResourceList from '../mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList';
import IoK8sApimachineryPkgApisMetaV1DeleteOptions from '../mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions';
import IoK8sApimachineryPkgApisMetaV1Patch from '../mikespgk/IoK8sApimachineryPkgApisMetaV1Patch';
import IoK8sApimachineryPkgApisMetaV1Status from '../mikespgk/IoK8sApimachineryPkgApisMetaV1Status';
import IoK8sApimachineryPkgApisMetaV1WatchEvent from '../mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent';

/**
* AuthorizationOpenshiftIoV1 service.
* @module api/AuthorizationOpenshiftIoV1Api
* @version v3.6.173.0.21
*/
export default class AuthorizationOpenshiftIoV1Api {

    /**
    * Constructs a new AuthorizationOpenshiftIoV1Api. 
    * @alias module:api/AuthorizationOpenshiftIoV1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1ClusterPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1ClusterPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ClusterPolicy
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1ClusterPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy}
     */
    createAuthorizationOpenshiftIoV1ClusterPolicy(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1ClusterPolicy");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1ClusterPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ClusterPolicyBinding
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding}
     */
    createAuthorizationOpenshiftIoV1ClusterPolicyBinding(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1ClusterPolicyBinding");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicybindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1ClusterRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ClusterRole
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole}
     */
    createAuthorizationOpenshiftIoV1ClusterRole(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1ClusterRole");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterroles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1ClusterRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ClusterRoleBinding
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding}
     */
    createAuthorizationOpenshiftIoV1ClusterRoleBinding(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1ClusterRoleBinding");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterrolebindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1LocalResourceAccessReviewForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1LocalResourceAccessReviewForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalResourceAccessReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a LocalResourceAccessReview
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalResourceAccessReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1LocalResourceAccessReviewForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalResourceAccessReview}
     */
    createAuthorizationOpenshiftIoV1LocalResourceAccessReviewForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1LocalResourceAccessReviewForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalResourceAccessReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/localresourceaccessreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1LocalSubjectAccessReviewForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1LocalSubjectAccessReviewForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalSubjectAccessReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a LocalSubjectAccessReview
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalSubjectAccessReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1LocalSubjectAccessReviewForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalSubjectAccessReview}
     */
    createAuthorizationOpenshiftIoV1LocalSubjectAccessReviewForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1LocalSubjectAccessReviewForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalSubjectAccessReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/localsubjectaccessreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReview operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalResourceAccessReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a LocalResourceAccessReview
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalResourceAccessReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalResourceAccessReview}
     */
    createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReview(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReview");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1NamespacedLocalResourceAccessReview");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalResourceAccessReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/localresourceaccessreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReview operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalSubjectAccessReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a LocalSubjectAccessReview
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalSubjectAccessReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalSubjectAccessReview}
     */
    createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReview(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReview");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1NamespacedLocalSubjectAccessReview");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1LocalSubjectAccessReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/localsubjectaccessreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1NamespacedPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Policy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy}
     */
    createAuthorizationOpenshiftIoV1NamespacedPolicy(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createAuthorizationOpenshiftIoV1NamespacedPolicy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1NamespacedPolicy");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1NamespacedPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a PolicyBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding}
     */
    createAuthorizationOpenshiftIoV1NamespacedPolicyBinding(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policybindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1NamespacedResourceAccessReview operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedResourceAccessReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ResourceAccessReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ResourceAccessReview
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ResourceAccessReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedResourceAccessReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ResourceAccessReview}
     */
    createAuthorizationOpenshiftIoV1NamespacedResourceAccessReview(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createAuthorizationOpenshiftIoV1NamespacedResourceAccessReview");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1NamespacedResourceAccessReview");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ResourceAccessReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/resourceaccessreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1NamespacedRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role}
     */
    createAuthorizationOpenshiftIoV1NamespacedRole(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createAuthorizationOpenshiftIoV1NamespacedRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1NamespacedRole");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1NamespacedRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding}
     */
    createAuthorizationOpenshiftIoV1NamespacedRoleBinding(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a RoleBindingRestriction
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction}
     */
    createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReview operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SelfSubjectRulesReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a SelfSubjectRulesReview
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SelfSubjectRulesReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SelfSubjectRulesReview}
     */
    createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReview(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReview");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1NamespacedSelfSubjectRulesReview");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SelfSubjectRulesReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/selfsubjectrulesreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1NamespacedSubjectAccessReview operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedSubjectAccessReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectAccessReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a SubjectAccessReview
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectAccessReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedSubjectAccessReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectAccessReview}
     */
    createAuthorizationOpenshiftIoV1NamespacedSubjectAccessReview(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createAuthorizationOpenshiftIoV1NamespacedSubjectAccessReview");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1NamespacedSubjectAccessReview");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectAccessReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/subjectaccessreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReview operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectRulesReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a SubjectRulesReview
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectRulesReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectRulesReview}
     */
    createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReview(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReview");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1NamespacedSubjectRulesReview");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectRulesReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/subjectrulesreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1PolicyBindingForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1PolicyBindingForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a PolicyBinding
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1PolicyBindingForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding}
     */
    createAuthorizationOpenshiftIoV1PolicyBindingForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1PolicyBindingForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/policybindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1PolicyForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1PolicyForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Policy
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1PolicyForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy}
     */
    createAuthorizationOpenshiftIoV1PolicyForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1PolicyForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/policies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1ResourceAccessReviewForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1ResourceAccessReviewForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ResourceAccessReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ResourceAccessReview
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ResourceAccessReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1ResourceAccessReviewForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ResourceAccessReview}
     */
    createAuthorizationOpenshiftIoV1ResourceAccessReviewForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1ResourceAccessReviewForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ResourceAccessReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/resourceaccessreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1RoleBindingForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a RoleBinding
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding}
     */
    createAuthorizationOpenshiftIoV1RoleBindingForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1RoleBindingForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/rolebindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a RoleBindingRestriction
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction}
     */
    createAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/rolebindingrestrictions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1RoleForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1RoleForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Role
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1RoleForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role}
     */
    createAuthorizationOpenshiftIoV1RoleForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1RoleForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1SelfSubjectRulesReviewForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1SelfSubjectRulesReviewForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SelfSubjectRulesReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a SelfSubjectRulesReview
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SelfSubjectRulesReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1SelfSubjectRulesReviewForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SelfSubjectRulesReview}
     */
    createAuthorizationOpenshiftIoV1SelfSubjectRulesReviewForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1SelfSubjectRulesReviewForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SelfSubjectRulesReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/selfsubjectrulesreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1SubjectAccessReviewForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1SubjectAccessReviewForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectAccessReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a SubjectAccessReview
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectAccessReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1SubjectAccessReviewForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectAccessReview}
     */
    createAuthorizationOpenshiftIoV1SubjectAccessReviewForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1SubjectAccessReviewForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectAccessReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/subjectaccessreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizationOpenshiftIoV1SubjectRulesReviewForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1SubjectRulesReviewForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectRulesReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a SubjectRulesReview
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectRulesReview} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~createAuthorizationOpenshiftIoV1SubjectRulesReviewForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectRulesReview}
     */
    createAuthorizationOpenshiftIoV1SubjectRulesReviewForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAuthorizationOpenshiftIoV1SubjectRulesReviewForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1SubjectRulesReview;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/subjectrulesreviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1ClusterPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1ClusterPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ClusterPolicy
     * @param {String} name name of the ClusterPolicy
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1ClusterPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1ClusterPolicy(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAuthorizationOpenshiftIoV1ClusterPolicy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthorizationOpenshiftIoV1ClusterPolicy");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicies/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1ClusterPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ClusterPolicyBinding
     * @param {String} name name of the ClusterPolicyBinding
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1ClusterPolicyBinding(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAuthorizationOpenshiftIoV1ClusterPolicyBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthorizationOpenshiftIoV1ClusterPolicyBinding");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicybindings/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1ClusterRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ClusterRole
     * @param {String} name name of the ClusterRole
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1ClusterRole(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAuthorizationOpenshiftIoV1ClusterRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthorizationOpenshiftIoV1ClusterRole");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterroles/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1ClusterRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a ClusterRoleBinding
     * @param {String} name name of the ClusterRoleBinding
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1ClusterRoleBinding(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAuthorizationOpenshiftIoV1ClusterRoleBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthorizationOpenshiftIoV1ClusterRoleBinding");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterrolebindings/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1CollectionClusterPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1CollectionClusterPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ClusterPolicy
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1CollectionClusterPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1CollectionClusterPolicy(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicies', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1CollectionClusterPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1CollectionClusterPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ClusterPolicyBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1CollectionClusterPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1CollectionClusterPolicyBinding(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicybindings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1CollectionNamespacedPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1CollectionNamespacedPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Policy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1CollectionNamespacedPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1CollectionNamespacedPolicy(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteAuthorizationOpenshiftIoV1CollectionNamespacedPolicy");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policies', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1CollectionNamespacedPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1CollectionNamespacedPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of PolicyBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1CollectionNamespacedPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1CollectionNamespacedPolicyBinding(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteAuthorizationOpenshiftIoV1CollectionNamespacedPolicyBinding");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policybindings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestriction operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of RoleBindingRestriction
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestriction(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteAuthorizationOpenshiftIoV1CollectionNamespacedRoleBindingRestriction");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1NamespacedPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1NamespacedPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Policy
     * @param {String} name name of the Policy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1NamespacedPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1NamespacedPolicy(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAuthorizationOpenshiftIoV1NamespacedPolicy");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteAuthorizationOpenshiftIoV1NamespacedPolicy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthorizationOpenshiftIoV1NamespacedPolicy");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policies/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1NamespacedPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a PolicyBinding
     * @param {String} name name of the PolicyBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1NamespacedPolicyBinding(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policybindings/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1NamespacedRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Role
     * @param {String} name name of the Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1NamespacedRole(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAuthorizationOpenshiftIoV1NamespacedRole");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteAuthorizationOpenshiftIoV1NamespacedRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthorizationOpenshiftIoV1NamespacedRole");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/roles/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1NamespacedRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a RoleBinding
     * @param {String} name name of the RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1NamespacedRoleBinding(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a RoleBindingRestriction
     * @param {String} name name of the RoleBindingRestriction
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizationOpenshiftIoV1APIResources operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~getAuthorizationOpenshiftIoV1APIResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get available resources
     * @param {module:api/AuthorizationOpenshiftIoV1Api~getAuthorizationOpenshiftIoV1APIResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList}
     */
    getAuthorizationOpenshiftIoV1APIResources(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1APIResourceList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1ClusterPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1ClusterPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ClusterPolicy
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1ClusterPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyList}
     */
    listAuthorizationOpenshiftIoV1ClusterPolicy(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1ClusterPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBindingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ClusterPolicyBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBindingList}
     */
    listAuthorizationOpenshiftIoV1ClusterPolicyBinding(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBindingList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicybindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1ClusterRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list objects of kind ClusterRole
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleList}
     */
    listAuthorizationOpenshiftIoV1ClusterRole(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterroles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1ClusterRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBindingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list objects of kind ClusterRoleBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBindingList}
     */
    listAuthorizationOpenshiftIoV1ClusterRoleBinding(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBindingList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterrolebindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1NamespacedPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1NamespacedPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Policy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1NamespacedPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyList}
     */
    listAuthorizationOpenshiftIoV1NamespacedPolicy(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listAuthorizationOpenshiftIoV1NamespacedPolicy");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1NamespacedPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBindingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind PolicyBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBindingList}
     */
    listAuthorizationOpenshiftIoV1NamespacedPolicyBinding(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBindingList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policybindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1NamespacedRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list objects of kind Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleList}
     */
    listAuthorizationOpenshiftIoV1NamespacedRole(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listAuthorizationOpenshiftIoV1NamespacedRole");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1NamespacedRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list objects of kind RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingList}
     */
    listAuthorizationOpenshiftIoV1NamespacedRoleBinding(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestrictionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind RoleBindingRestriction
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestrictionList}
     */
    listAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestrictionList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1PolicyBindingForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1PolicyBindingForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBindingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind PolicyBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1PolicyBindingForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBindingList}
     */
    listAuthorizationOpenshiftIoV1PolicyBindingForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBindingList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/policybindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1PolicyForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1PolicyForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Policy
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1PolicyForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyList}
     */
    listAuthorizationOpenshiftIoV1PolicyForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1RoleBindingForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list objects of kind RoleBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1RoleBindingForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingList}
     */
    listAuthorizationOpenshiftIoV1RoleBindingForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/rolebindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestrictionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind RoleBindingRestriction
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestrictionList}
     */
    listAuthorizationOpenshiftIoV1RoleBindingRestrictionForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestrictionList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/rolebindingrestrictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAuthorizationOpenshiftIoV1RoleForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1RoleForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list objects of kind Role
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~listAuthorizationOpenshiftIoV1RoleForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleList}
     */
    listAuthorizationOpenshiftIoV1RoleForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleList;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAuthorizationOpenshiftIoV1ClusterPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1ClusterPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ClusterPolicy
     * @param {String} name name of the ClusterPolicy
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1ClusterPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy}
     */
    patchAuthorizationOpenshiftIoV1ClusterPolicy(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchAuthorizationOpenshiftIoV1ClusterPolicy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchAuthorizationOpenshiftIoV1ClusterPolicy");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicies/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAuthorizationOpenshiftIoV1ClusterPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ClusterPolicyBinding
     * @param {String} name name of the ClusterPolicyBinding
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding}
     */
    patchAuthorizationOpenshiftIoV1ClusterPolicyBinding(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchAuthorizationOpenshiftIoV1ClusterPolicyBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchAuthorizationOpenshiftIoV1ClusterPolicyBinding");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicybindings/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAuthorizationOpenshiftIoV1ClusterRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ClusterRole
     * @param {String} name name of the ClusterRole
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole}
     */
    patchAuthorizationOpenshiftIoV1ClusterRole(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchAuthorizationOpenshiftIoV1ClusterRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchAuthorizationOpenshiftIoV1ClusterRole");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterroles/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAuthorizationOpenshiftIoV1ClusterRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ClusterRoleBinding
     * @param {String} name name of the ClusterRoleBinding
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding}
     */
    patchAuthorizationOpenshiftIoV1ClusterRoleBinding(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchAuthorizationOpenshiftIoV1ClusterRoleBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchAuthorizationOpenshiftIoV1ClusterRoleBinding");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterrolebindings/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAuthorizationOpenshiftIoV1NamespacedPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1NamespacedPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Policy
     * @param {String} name name of the Policy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1NamespacedPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy}
     */
    patchAuthorizationOpenshiftIoV1NamespacedPolicy(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchAuthorizationOpenshiftIoV1NamespacedPolicy");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchAuthorizationOpenshiftIoV1NamespacedPolicy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchAuthorizationOpenshiftIoV1NamespacedPolicy");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policies/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAuthorizationOpenshiftIoV1NamespacedPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified PolicyBinding
     * @param {String} name name of the PolicyBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding}
     */
    patchAuthorizationOpenshiftIoV1NamespacedPolicyBinding(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policybindings/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAuthorizationOpenshiftIoV1NamespacedRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Role
     * @param {String} name name of the Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role}
     */
    patchAuthorizationOpenshiftIoV1NamespacedRole(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchAuthorizationOpenshiftIoV1NamespacedRole");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchAuthorizationOpenshiftIoV1NamespacedRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchAuthorizationOpenshiftIoV1NamespacedRole");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/roles/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAuthorizationOpenshiftIoV1NamespacedRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified RoleBinding
     * @param {String} name name of the RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding}
     */
    patchAuthorizationOpenshiftIoV1NamespacedRoleBinding(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified RoleBindingRestriction
     * @param {String} name name of the RoleBindingRestriction
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction}
     */
    patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAuthorizationOpenshiftIoV1ClusterPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1ClusterPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ClusterPolicy
     * @param {String} name name of the ClusterPolicy
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1ClusterPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy}
     */
    readAuthorizationOpenshiftIoV1ClusterPolicy(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readAuthorizationOpenshiftIoV1ClusterPolicy");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicies/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAuthorizationOpenshiftIoV1ClusterPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ClusterPolicyBinding
     * @param {String} name name of the ClusterPolicyBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding}
     */
    readAuthorizationOpenshiftIoV1ClusterPolicyBinding(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readAuthorizationOpenshiftIoV1ClusterPolicyBinding");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicybindings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAuthorizationOpenshiftIoV1ClusterRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ClusterRole
     * @param {String} name name of the ClusterRole
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole}
     */
    readAuthorizationOpenshiftIoV1ClusterRole(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readAuthorizationOpenshiftIoV1ClusterRole");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterroles/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAuthorizationOpenshiftIoV1ClusterRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ClusterRoleBinding
     * @param {String} name name of the ClusterRoleBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding}
     */
    readAuthorizationOpenshiftIoV1ClusterRoleBinding(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readAuthorizationOpenshiftIoV1ClusterRoleBinding");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterrolebindings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAuthorizationOpenshiftIoV1NamespacedPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1NamespacedPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Policy
     * @param {String} name name of the Policy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1NamespacedPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy}
     */
    readAuthorizationOpenshiftIoV1NamespacedPolicy(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readAuthorizationOpenshiftIoV1NamespacedPolicy");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readAuthorizationOpenshiftIoV1NamespacedPolicy");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policies/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAuthorizationOpenshiftIoV1NamespacedPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified PolicyBinding
     * @param {String} name name of the PolicyBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding}
     */
    readAuthorizationOpenshiftIoV1NamespacedPolicyBinding(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policybindings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAuthorizationOpenshiftIoV1NamespacedRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Role
     * @param {String} name name of the Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role}
     */
    readAuthorizationOpenshiftIoV1NamespacedRole(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readAuthorizationOpenshiftIoV1NamespacedRole");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readAuthorizationOpenshiftIoV1NamespacedRole");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/roles/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAuthorizationOpenshiftIoV1NamespacedRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified RoleBinding
     * @param {String} name name of the RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding}
     */
    readAuthorizationOpenshiftIoV1NamespacedRoleBinding(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified RoleBindingRestriction
     * @param {String} name name of the RoleBindingRestriction
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction}
     */
    readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAuthorizationOpenshiftIoV1ClusterPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1ClusterPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ClusterPolicy
     * @param {String} name name of the ClusterPolicy
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1ClusterPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy}
     */
    replaceAuthorizationOpenshiftIoV1ClusterPolicy(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceAuthorizationOpenshiftIoV1ClusterPolicy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceAuthorizationOpenshiftIoV1ClusterPolicy");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicy;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicies/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAuthorizationOpenshiftIoV1ClusterPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ClusterPolicyBinding
     * @param {String} name name of the ClusterPolicyBinding
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding}
     */
    replaceAuthorizationOpenshiftIoV1ClusterPolicyBinding(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceAuthorizationOpenshiftIoV1ClusterPolicyBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceAuthorizationOpenshiftIoV1ClusterPolicyBinding");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterPolicyBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterpolicybindings/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAuthorizationOpenshiftIoV1ClusterRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1ClusterRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ClusterRole
     * @param {String} name name of the ClusterRole
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1ClusterRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole}
     */
    replaceAuthorizationOpenshiftIoV1ClusterRole(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceAuthorizationOpenshiftIoV1ClusterRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceAuthorizationOpenshiftIoV1ClusterRole");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRole;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterroles/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAuthorizationOpenshiftIoV1ClusterRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1ClusterRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ClusterRoleBinding
     * @param {String} name name of the ClusterRoleBinding
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1ClusterRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding}
     */
    replaceAuthorizationOpenshiftIoV1ClusterRoleBinding(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceAuthorizationOpenshiftIoV1ClusterRoleBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceAuthorizationOpenshiftIoV1ClusterRoleBinding");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1ClusterRoleBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/clusterrolebindings/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAuthorizationOpenshiftIoV1NamespacedPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1NamespacedPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Policy
     * @param {String} name name of the Policy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1NamespacedPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy}
     */
    replaceAuthorizationOpenshiftIoV1NamespacedPolicy(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceAuthorizationOpenshiftIoV1NamespacedPolicy");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceAuthorizationOpenshiftIoV1NamespacedPolicy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceAuthorizationOpenshiftIoV1NamespacedPolicy");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Policy;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policies/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAuthorizationOpenshiftIoV1NamespacedPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified PolicyBinding
     * @param {String} name name of the PolicyBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding}
     */
    replaceAuthorizationOpenshiftIoV1NamespacedPolicyBinding(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1PolicyBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/policybindings/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAuthorizationOpenshiftIoV1NamespacedRole operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1NamespacedRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Role
     * @param {String} name name of the Role
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1NamespacedRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role}
     */
    replaceAuthorizationOpenshiftIoV1NamespacedRole(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceAuthorizationOpenshiftIoV1NamespacedRole");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceAuthorizationOpenshiftIoV1NamespacedRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceAuthorizationOpenshiftIoV1NamespacedRole");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1Role;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/roles/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAuthorizationOpenshiftIoV1NamespacedRoleBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified RoleBinding
     * @param {String} name name of the RoleBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding}
     */
    replaceAuthorizationOpenshiftIoV1NamespacedRoleBinding(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceAuthorizationOpenshiftIoV1NamespacedRoleBinding");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBinding;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindings/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified RoleBindingRestriction
     * @param {String} name name of the RoleBindingRestriction
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction}
     */
    replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgAuthorizationApisAuthorizationV1RoleBindingRestriction;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/namespaces/{namespace}/rolebindingrestrictions/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1ClusterPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1ClusterPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ClusterPolicy
     * @param {String} name name of the ClusterPolicy
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1ClusterPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1ClusterPolicy(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling watchAuthorizationOpenshiftIoV1ClusterPolicy");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/clusterpolicies/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1ClusterPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ClusterPolicyBinding
     * @param {String} name name of the ClusterPolicyBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1ClusterPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1ClusterPolicyBinding(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling watchAuthorizationOpenshiftIoV1ClusterPolicyBinding");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/clusterpolicybindings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1ClusterPolicyBindingList operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1ClusterPolicyBindingListCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ClusterPolicyBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1ClusterPolicyBindingListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1ClusterPolicyBindingList(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/clusterpolicybindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1ClusterPolicyList operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1ClusterPolicyListCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ClusterPolicy
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1ClusterPolicyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1ClusterPolicyList(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/clusterpolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1NamespacedPolicy operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Policy
     * @param {String} name name of the Policy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1NamespacedPolicy(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling watchAuthorizationOpenshiftIoV1NamespacedPolicy");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchAuthorizationOpenshiftIoV1NamespacedPolicy");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/namespaces/{namespace}/policies/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1NamespacedPolicyBinding operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind PolicyBinding
     * @param {String} name name of the PolicyBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedPolicyBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1NamespacedPolicyBinding(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling watchAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchAuthorizationOpenshiftIoV1NamespacedPolicyBinding");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/namespaces/{namespace}/policybindings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1NamespacedPolicyBindingList operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedPolicyBindingListCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of PolicyBinding
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedPolicyBindingListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1NamespacedPolicyBindingList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchAuthorizationOpenshiftIoV1NamespacedPolicyBindingList");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/namespaces/{namespace}/policybindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1NamespacedPolicyList operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedPolicyListCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Policy
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedPolicyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1NamespacedPolicyList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchAuthorizationOpenshiftIoV1NamespacedPolicyList");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/namespaces/{namespace}/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind RoleBindingRestriction
     * @param {String} name name of the RoleBindingRestriction
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestriction");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/namespaces/{namespace}/rolebindingrestrictions/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionList operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of RoleBindingRestriction
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchAuthorizationOpenshiftIoV1NamespacedRoleBindingRestrictionList");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/namespaces/{namespace}/rolebindingrestrictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1PolicyBindingListForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1PolicyBindingListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of PolicyBinding
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1PolicyBindingListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1PolicyBindingListForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/policybindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1PolicyListForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1PolicyListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Policy
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1PolicyListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1PolicyListForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespaces operation.
     * @callback module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of RoleBindingRestriction
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/AuthorizationOpenshiftIoV1Api~watchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchAuthorizationOpenshiftIoV1RoleBindingRestrictionListForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/authorization.openshift.io/v1/watch/rolebindingrestrictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
