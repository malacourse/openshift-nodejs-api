/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: v3.6.173.0.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComGithubOpenshiftOriginPkgImageApisImageV1Image from '../mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1Image';
import ComGithubOpenshiftOriginPkgImageApisImageV1ImageList from '../mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageList';
import ComGithubOpenshiftOriginPkgImageApisImageV1ImageSignature from '../mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageSignature';
import ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream from '../mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream';
import ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImage from '../mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImage';
import ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImport from '../mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImport';
import ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamList from '../mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamList';
import ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamMapping from '../mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamMapping';
import ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag from '../mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag';
import ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTagList from '../mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTagList';
import IoK8sApimachineryPkgApisMetaV1APIResourceList from '../mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList';
import IoK8sApimachineryPkgApisMetaV1DeleteOptions from '../mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions';
import IoK8sApimachineryPkgApisMetaV1Patch from '../mikespgk/IoK8sApimachineryPkgApisMetaV1Patch';
import IoK8sApimachineryPkgApisMetaV1Status from '../mikespgk/IoK8sApimachineryPkgApisMetaV1Status';
import IoK8sApimachineryPkgApisMetaV1WatchEvent from '../mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent';
import IoK8sKubernetesPkgApiV1SecretList from '../mikespgk/IoK8sKubernetesPkgApiV1SecretList';

/**
* ImageOpenshiftIoV1 service.
* @module api/ImageOpenshiftIoV1Api
* @version v3.6.173.0.21
*/
export default class ImageOpenshiftIoV1Api {

    /**
    * Constructs a new ImageOpenshiftIoV1Api. 
    * @alias module:api/ImageOpenshiftIoV1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createImageOpenshiftIoV1Image operation.
     * @callback module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an Image
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1Image} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1Image}
     */
    createImageOpenshiftIoV1Image(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImageOpenshiftIoV1Image");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1Image;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageOpenshiftIoV1ImageSignature operation.
     * @callback module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageSignatureCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageSignature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an ImageSignature
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageSignature} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageSignatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageSignature}
     */
    createImageOpenshiftIoV1ImageSignature(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImageOpenshiftIoV1ImageSignature");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageSignature;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/imagesignatures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageOpenshiftIoV1ImageStreamForAllNamespaces operation.
     * @callback module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageStreamForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an ImageStream
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageStreamForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream}
     */
    createImageOpenshiftIoV1ImageStreamForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImageOpenshiftIoV1ImageStreamForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/imagestreams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageOpenshiftIoV1ImageStreamImportForAllNamespaces operation.
     * @callback module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageStreamImportForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an ImageStreamImport
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImport} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageStreamImportForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImport}
     */
    createImageOpenshiftIoV1ImageStreamImportForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImageOpenshiftIoV1ImageStreamImportForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImport;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/imagestreamimports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageOpenshiftIoV1ImageStreamMappingForAllNamespaces operation.
     * @callback module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageStreamMappingForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an ImageStreamMapping
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamMapping} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageStreamMappingForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamMapping}
     */
    createImageOpenshiftIoV1ImageStreamMappingForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImageOpenshiftIoV1ImageStreamMappingForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamMapping;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/imagestreammappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageOpenshiftIoV1ImageStreamTagForAllNamespaces operation.
     * @callback module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageStreamTagForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an ImageStreamTag
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1ImageStreamTagForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag}
     */
    createImageOpenshiftIoV1ImageStreamTagForAllNamespaces(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImageOpenshiftIoV1ImageStreamTagForAllNamespaces");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/imagestreamtags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageOpenshiftIoV1NamespacedImageStream operation.
     * @callback module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1NamespacedImageStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1NamespacedImageStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream}
     */
    createImageOpenshiftIoV1NamespacedImageStream(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createImageOpenshiftIoV1NamespacedImageStream");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImageOpenshiftIoV1NamespacedImageStream");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageOpenshiftIoV1NamespacedImageStreamImport operation.
     * @callback module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1NamespacedImageStreamImportCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an ImageStreamImport
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImport} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1NamespacedImageStreamImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImport}
     */
    createImageOpenshiftIoV1NamespacedImageStreamImport(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createImageOpenshiftIoV1NamespacedImageStreamImport");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImageOpenshiftIoV1NamespacedImageStreamImport");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImport;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamimports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageOpenshiftIoV1NamespacedImageStreamMapping operation.
     * @callback module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1NamespacedImageStreamMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an ImageStreamMapping
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamMapping} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1NamespacedImageStreamMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamMapping}
     */
    createImageOpenshiftIoV1NamespacedImageStreamMapping(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createImageOpenshiftIoV1NamespacedImageStreamMapping");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImageOpenshiftIoV1NamespacedImageStreamMapping");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamMapping;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreammappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageOpenshiftIoV1NamespacedImageStreamTag operation.
     * @callback module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1NamespacedImageStreamTagCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create an ImageStreamTag
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~createImageOpenshiftIoV1NamespacedImageStreamTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag}
     */
    createImageOpenshiftIoV1NamespacedImageStreamTag(namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling createImageOpenshiftIoV1NamespacedImageStreamTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createImageOpenshiftIoV1NamespacedImageStreamTag");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageOpenshiftIoV1CollectionImage operation.
     * @callback module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1CollectionImageCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of Image
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1CollectionImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteImageOpenshiftIoV1CollectionImage(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/images', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageOpenshiftIoV1CollectionNamespacedImageStream operation.
     * @callback module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1CollectionNamespacedImageStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete collection of ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1CollectionNamespacedImageStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteImageOpenshiftIoV1CollectionNamespacedImageStream(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteImageOpenshiftIoV1CollectionNamespacedImageStream");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageOpenshiftIoV1Image operation.
     * @callback module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1ImageCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an Image
     * @param {String} name name of the Image
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1ImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteImageOpenshiftIoV1Image(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteImageOpenshiftIoV1Image");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteImageOpenshiftIoV1Image");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/images/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageOpenshiftIoV1ImageSignature operation.
     * @callback module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1ImageSignatureCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an ImageSignature
     * @param {String} name name of the ImageSignature
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1ImageSignatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteImageOpenshiftIoV1ImageSignature(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteImageOpenshiftIoV1ImageSignature");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/imagesignatures/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageOpenshiftIoV1NamespacedImageStream operation.
     * @callback module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1NamespacedImageStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an ImageStream
     * @param {String} name name of the ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1DeleteOptions} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Number} opts.gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param {Boolean} opts.orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param {String} opts.propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
     * @param {module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1NamespacedImageStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteImageOpenshiftIoV1NamespacedImageStream(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteImageOpenshiftIoV1NamespacedImageStream");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteImageOpenshiftIoV1NamespacedImageStream");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteImageOpenshiftIoV1NamespacedImageStream");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'gracePeriodSeconds': opts['gracePeriodSeconds'],
        'orphanDependents': opts['orphanDependents'],
        'propagationPolicy': opts['propagationPolicy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageOpenshiftIoV1NamespacedImageStreamTag operation.
     * @callback module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1NamespacedImageStreamTagCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an ImageStreamTag
     * @param {String} name name of the ImageStreamTag
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~deleteImageOpenshiftIoV1NamespacedImageStreamTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteImageOpenshiftIoV1NamespacedImageStreamTag(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteImageOpenshiftIoV1NamespacedImageStreamTag");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling deleteImageOpenshiftIoV1NamespacedImageStreamTag");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageOpenshiftIoV1APIResources operation.
     * @callback module:api/ImageOpenshiftIoV1Api~getImageOpenshiftIoV1APIResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get available resources
     * @param {module:api/ImageOpenshiftIoV1Api~getImageOpenshiftIoV1APIResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList}
     */
    getImageOpenshiftIoV1APIResources(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1APIResourceList;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listImageOpenshiftIoV1Image operation.
     * @callback module:api/ImageOpenshiftIoV1Api~listImageOpenshiftIoV1ImageCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Image
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~listImageOpenshiftIoV1ImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageList}
     */
    listImageOpenshiftIoV1Image(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageList;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listImageOpenshiftIoV1ImageStreamForAllNamespaces operation.
     * @callback module:api/ImageOpenshiftIoV1Api~listImageOpenshiftIoV1ImageStreamForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ImageStream
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~listImageOpenshiftIoV1ImageStreamForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamList}
     */
    listImageOpenshiftIoV1ImageStreamForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamList;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/imagestreams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listImageOpenshiftIoV1ImageStreamTagForAllNamespaces operation.
     * @callback module:api/ImageOpenshiftIoV1Api~listImageOpenshiftIoV1ImageStreamTagForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTagList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list objects of kind ImageStreamTag
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~listImageOpenshiftIoV1ImageStreamTagForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTagList}
     */
    listImageOpenshiftIoV1ImageStreamTagForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTagList;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/imagestreamtags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listImageOpenshiftIoV1NamespacedImageStream operation.
     * @callback module:api/ImageOpenshiftIoV1Api~listImageOpenshiftIoV1NamespacedImageStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~listImageOpenshiftIoV1NamespacedImageStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamList}
     */
    listImageOpenshiftIoV1NamespacedImageStream(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listImageOpenshiftIoV1NamespacedImageStream");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamList;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listImageOpenshiftIoV1NamespacedImageStreamTag operation.
     * @callback module:api/ImageOpenshiftIoV1Api~listImageOpenshiftIoV1NamespacedImageStreamTagCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTagList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list objects of kind ImageStreamTag
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~listImageOpenshiftIoV1NamespacedImageStreamTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTagList}
     */
    listImageOpenshiftIoV1NamespacedImageStreamTag(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling listImageOpenshiftIoV1NamespacedImageStreamTag");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTagList;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchImageOpenshiftIoV1Image operation.
     * @callback module:api/ImageOpenshiftIoV1Api~patchImageOpenshiftIoV1ImageCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Image
     * @param {String} name name of the Image
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~patchImageOpenshiftIoV1ImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1Image}
     */
    patchImageOpenshiftIoV1Image(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchImageOpenshiftIoV1Image");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchImageOpenshiftIoV1Image");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1Image;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/images/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchImageOpenshiftIoV1NamespacedImageStream operation.
     * @callback module:api/ImageOpenshiftIoV1Api~patchImageOpenshiftIoV1NamespacedImageStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ImageStream
     * @param {String} name name of the ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~patchImageOpenshiftIoV1NamespacedImageStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream}
     */
    patchImageOpenshiftIoV1NamespacedImageStream(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchImageOpenshiftIoV1NamespacedImageStream");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchImageOpenshiftIoV1NamespacedImageStream");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchImageOpenshiftIoV1NamespacedImageStream");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchImageOpenshiftIoV1NamespacedImageStreamStatus operation.
     * @callback module:api/ImageOpenshiftIoV1Api~patchImageOpenshiftIoV1NamespacedImageStreamStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update status of the specified ImageStream
     * @param {String} name name of the ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~patchImageOpenshiftIoV1NamespacedImageStreamStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream}
     */
    patchImageOpenshiftIoV1NamespacedImageStreamStatus(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchImageOpenshiftIoV1NamespacedImageStreamStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchImageOpenshiftIoV1NamespacedImageStreamStatus");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchImageOpenshiftIoV1NamespacedImageStreamStatus");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchImageOpenshiftIoV1NamespacedImageStreamTag operation.
     * @callback module:api/ImageOpenshiftIoV1Api~patchImageOpenshiftIoV1NamespacedImageStreamTagCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified ImageStreamTag
     * @param {String} name name of the ImageStreamTag
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~patchImageOpenshiftIoV1NamespacedImageStreamTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag}
     */
    patchImageOpenshiftIoV1NamespacedImageStreamTag(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchImageOpenshiftIoV1NamespacedImageStreamTag");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling patchImageOpenshiftIoV1NamespacedImageStreamTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchImageOpenshiftIoV1NamespacedImageStreamTag");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readImageOpenshiftIoV1Image operation.
     * @callback module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1ImageCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Image
     * @param {String} name name of the Image
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1ImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1Image}
     */
    readImageOpenshiftIoV1Image(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readImageOpenshiftIoV1Image");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1Image;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/images/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readImageOpenshiftIoV1NamespacedImageStream operation.
     * @callback module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1NamespacedImageStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ImageStream
     * @param {String} name name of the ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {Boolean} opts.exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
     * @param {Boolean} opts._export Should this value be exported.  Export strips fields that a user can not specify.
     * @param {module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1NamespacedImageStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream}
     */
    readImageOpenshiftIoV1NamespacedImageStream(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readImageOpenshiftIoV1NamespacedImageStream");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readImageOpenshiftIoV1NamespacedImageStream");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'exact': opts['exact'],
        'export': opts['_export']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readImageOpenshiftIoV1NamespacedImageStreamImage operation.
     * @callback module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1NamespacedImageStreamImageCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ImageStreamImage
     * @param {String} name name of the ImageStreamImage
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1NamespacedImageStreamImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImage}
     */
    readImageOpenshiftIoV1NamespacedImageStreamImage(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readImageOpenshiftIoV1NamespacedImageStreamImage");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readImageOpenshiftIoV1NamespacedImageStreamImage");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamImage;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamimages/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readImageOpenshiftIoV1NamespacedImageStreamStatus operation.
     * @callback module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1NamespacedImageStreamStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read status of the specified ImageStream
     * @param {String} name name of the ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1NamespacedImageStreamStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream}
     */
    readImageOpenshiftIoV1NamespacedImageStreamStatus(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readImageOpenshiftIoV1NamespacedImageStreamStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readImageOpenshiftIoV1NamespacedImageStreamStatus");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readImageOpenshiftIoV1NamespacedImageStreamTag operation.
     * @callback module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1NamespacedImageStreamTagCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified ImageStreamTag
     * @param {String} name name of the ImageStreamTag
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1NamespacedImageStreamTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag}
     */
    readImageOpenshiftIoV1NamespacedImageStreamTag(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readImageOpenshiftIoV1NamespacedImageStreamTag");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readImageOpenshiftIoV1NamespacedImageStreamTag");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readImageOpenshiftIoV1NamespacedSecretListSecrets operation.
     * @callback module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1NamespacedSecretListSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sKubernetesPkgApiV1SecretList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read secrets of the specified SecretList
     * @param {String} name name of the SecretList
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~readImageOpenshiftIoV1NamespacedSecretListSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sKubernetesPkgApiV1SecretList}
     */
    readImageOpenshiftIoV1NamespacedSecretListSecrets(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readImageOpenshiftIoV1NamespacedSecretListSecrets");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling readImageOpenshiftIoV1NamespacedSecretListSecrets");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sKubernetesPkgApiV1SecretList;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceImageOpenshiftIoV1Image operation.
     * @callback module:api/ImageOpenshiftIoV1Api~replaceImageOpenshiftIoV1ImageCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Image
     * @param {String} name name of the Image
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1Image} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~replaceImageOpenshiftIoV1ImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1Image}
     */
    replaceImageOpenshiftIoV1Image(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceImageOpenshiftIoV1Image");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceImageOpenshiftIoV1Image");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1Image;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/images/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceImageOpenshiftIoV1NamespacedImageStream operation.
     * @callback module:api/ImageOpenshiftIoV1Api~replaceImageOpenshiftIoV1NamespacedImageStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ImageStream
     * @param {String} name name of the ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~replaceImageOpenshiftIoV1NamespacedImageStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream}
     */
    replaceImageOpenshiftIoV1NamespacedImageStream(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceImageOpenshiftIoV1NamespacedImageStream");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceImageOpenshiftIoV1NamespacedImageStream");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceImageOpenshiftIoV1NamespacedImageStream");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceImageOpenshiftIoV1NamespacedImageStreamStatus operation.
     * @callback module:api/ImageOpenshiftIoV1Api~replaceImageOpenshiftIoV1NamespacedImageStreamStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace status of the specified ImageStream
     * @param {String} name name of the ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~replaceImageOpenshiftIoV1NamespacedImageStreamStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream}
     */
    replaceImageOpenshiftIoV1NamespacedImageStreamStatus(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceImageOpenshiftIoV1NamespacedImageStreamStatus");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceImageOpenshiftIoV1NamespacedImageStreamStatus");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceImageOpenshiftIoV1NamespacedImageStreamStatus");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStream;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreams/{name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceImageOpenshiftIoV1NamespacedImageStreamTag operation.
     * @callback module:api/ImageOpenshiftIoV1Api~replaceImageOpenshiftIoV1NamespacedImageStreamTagCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified ImageStreamTag
     * @param {String} name name of the ImageStreamTag
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ImageOpenshiftIoV1Api~replaceImageOpenshiftIoV1NamespacedImageStreamTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag}
     */
    replaceImageOpenshiftIoV1NamespacedImageStreamTag(name, namespace, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceImageOpenshiftIoV1NamespacedImageStreamTag");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling replaceImageOpenshiftIoV1NamespacedImageStreamTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceImageOpenshiftIoV1NamespacedImageStreamTag");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgImageApisImageV1ImageStreamTag;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamtags/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchImageOpenshiftIoV1Image operation.
     * @callback module:api/ImageOpenshiftIoV1Api~watchImageOpenshiftIoV1ImageCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Image
     * @param {String} name name of the Image
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~watchImageOpenshiftIoV1ImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchImageOpenshiftIoV1Image(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling watchImageOpenshiftIoV1Image");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/watch/images/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchImageOpenshiftIoV1ImageList operation.
     * @callback module:api/ImageOpenshiftIoV1Api~watchImageOpenshiftIoV1ImageListCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Image
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~watchImageOpenshiftIoV1ImageListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchImageOpenshiftIoV1ImageList(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/watch/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchImageOpenshiftIoV1ImageStreamListForAllNamespaces operation.
     * @callback module:api/ImageOpenshiftIoV1Api~watchImageOpenshiftIoV1ImageStreamListForAllNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ImageStream
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~watchImageOpenshiftIoV1ImageStreamListForAllNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchImageOpenshiftIoV1ImageStreamListForAllNamespaces(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/watch/imagestreams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchImageOpenshiftIoV1NamespacedImageStream operation.
     * @callback module:api/ImageOpenshiftIoV1Api~watchImageOpenshiftIoV1NamespacedImageStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind ImageStream
     * @param {String} name name of the ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~watchImageOpenshiftIoV1NamespacedImageStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchImageOpenshiftIoV1NamespacedImageStream(name, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling watchImageOpenshiftIoV1NamespacedImageStream");
      }

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchImageOpenshiftIoV1NamespacedImageStream");
      }


      let pathParams = {
        'name': name,
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/watch/namespaces/{namespace}/imagestreams/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchImageOpenshiftIoV1NamespacedImageStreamList operation.
     * @callback module:api/ImageOpenshiftIoV1Api~watchImageOpenshiftIoV1NamespacedImageStreamListCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of ImageStream
     * @param {String} namespace object name and auth scope, such as for teams and projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ImageOpenshiftIoV1Api~watchImageOpenshiftIoV1NamespacedImageStreamListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchImageOpenshiftIoV1NamespacedImageStreamList(namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling watchImageOpenshiftIoV1NamespacedImageStreamList");
      }


      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/image.openshift.io/v1/watch/namespaces/{namespace}/imagestreams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
