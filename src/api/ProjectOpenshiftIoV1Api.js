/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: v3.6.173.0.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComGithubOpenshiftOriginPkgProjectApisProjectV1Project from '../mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1Project';
import ComGithubOpenshiftOriginPkgProjectApisProjectV1ProjectList from '../mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1ProjectList';
import ComGithubOpenshiftOriginPkgProjectApisProjectV1ProjectRequest from '../mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1ProjectRequest';
import IoK8sApimachineryPkgApisMetaV1APIResourceList from '../mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList';
import IoK8sApimachineryPkgApisMetaV1Patch from '../mikespgk/IoK8sApimachineryPkgApisMetaV1Patch';
import IoK8sApimachineryPkgApisMetaV1Status from '../mikespgk/IoK8sApimachineryPkgApisMetaV1Status';
import IoK8sApimachineryPkgApisMetaV1WatchEvent from '../mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent';

/**
* ProjectOpenshiftIoV1 service.
* @module api/ProjectOpenshiftIoV1Api
* @version v3.6.173.0.21
*/
export default class ProjectOpenshiftIoV1Api {

    /**
    * Constructs a new ProjectOpenshiftIoV1Api. 
    * @alias module:api/ProjectOpenshiftIoV1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProjectOpenshiftIoV1Project operation.
     * @callback module:api/ProjectOpenshiftIoV1Api~createProjectOpenshiftIoV1ProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a Project
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1Project} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ProjectOpenshiftIoV1Api~createProjectOpenshiftIoV1ProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1Project}
     */
    createProjectOpenshiftIoV1Project(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProjectOpenshiftIoV1Project");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgProjectApisProjectV1Project;

      return this.apiClient.callApi(
        '/apis/project.openshift.io/v1/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectOpenshiftIoV1ProjectRequest operation.
     * @callback module:api/ProjectOpenshiftIoV1Api~createProjectOpenshiftIoV1ProjectRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1ProjectRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create a ProjectRequest
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1ProjectRequest} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ProjectOpenshiftIoV1Api~createProjectOpenshiftIoV1ProjectRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1ProjectRequest}
     */
    createProjectOpenshiftIoV1ProjectRequest(body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProjectOpenshiftIoV1ProjectRequest");
      }


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgProjectApisProjectV1ProjectRequest;

      return this.apiClient.callApi(
        '/apis/project.openshift.io/v1/projectrequests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjectOpenshiftIoV1Project operation.
     * @callback module:api/ProjectOpenshiftIoV1Api~deleteProjectOpenshiftIoV1ProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Project
     * @param {String} name name of the Project
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ProjectOpenshiftIoV1Api~deleteProjectOpenshiftIoV1ProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    deleteProjectOpenshiftIoV1Project(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteProjectOpenshiftIoV1Project");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/project.openshift.io/v1/projects/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectOpenshiftIoV1APIResources operation.
     * @callback module:api/ProjectOpenshiftIoV1Api~getProjectOpenshiftIoV1APIResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get available resources
     * @param {module:api/ProjectOpenshiftIoV1Api~getProjectOpenshiftIoV1APIResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1APIResourceList}
     */
    getProjectOpenshiftIoV1APIResources(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = IoK8sApimachineryPkgApisMetaV1APIResourceList;

      return this.apiClient.callApi(
        '/apis/project.openshift.io/v1/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjectOpenshiftIoV1Project operation.
     * @callback module:api/ProjectOpenshiftIoV1Api~listProjectOpenshiftIoV1ProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1ProjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list or watch objects of kind Project
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ProjectOpenshiftIoV1Api~listProjectOpenshiftIoV1ProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1ProjectList}
     */
    listProjectOpenshiftIoV1Project(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = ComGithubOpenshiftOriginPkgProjectApisProjectV1ProjectList;

      return this.apiClient.callApi(
        '/apis/project.openshift.io/v1/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjectOpenshiftIoV1ProjectRequest operation.
     * @callback module:api/ProjectOpenshiftIoV1Api~listProjectOpenshiftIoV1ProjectRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list objects of kind ProjectRequest
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ProjectOpenshiftIoV1Api~listProjectOpenshiftIoV1ProjectRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1Status}
     */
    listProjectOpenshiftIoV1ProjectRequest(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1Status;

      return this.apiClient.callApi(
        '/apis/project.openshift.io/v1/projectrequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProjectOpenshiftIoV1Project operation.
     * @callback module:api/ProjectOpenshiftIoV1Api~patchProjectOpenshiftIoV1ProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * partially update the specified Project
     * @param {String} name name of the Project
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1Patch} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ProjectOpenshiftIoV1Api~patchProjectOpenshiftIoV1ProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1Project}
     */
    patchProjectOpenshiftIoV1Project(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchProjectOpenshiftIoV1Project");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchProjectOpenshiftIoV1Project");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['application/json-patch+json', 'application/merge-patch+json', 'application/strategic-merge-patch+json'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgProjectApisProjectV1Project;

      return this.apiClient.callApi(
        '/apis/project.openshift.io/v1/projects/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the readProjectOpenshiftIoV1Project operation.
     * @callback module:api/ProjectOpenshiftIoV1Api~readProjectOpenshiftIoV1ProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * read the specified Project
     * @param {String} name name of the Project
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ProjectOpenshiftIoV1Api~readProjectOpenshiftIoV1ProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1Project}
     */
    readProjectOpenshiftIoV1Project(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling readProjectOpenshiftIoV1Project");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgProjectApisProjectV1Project;

      return this.apiClient.callApi(
        '/apis/project.openshift.io/v1/projects/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceProjectOpenshiftIoV1Project operation.
     * @callback module:api/ProjectOpenshiftIoV1Api~replaceProjectOpenshiftIoV1ProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * replace the specified Project
     * @param {String} name name of the Project
     * @param {module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1Project} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {module:api/ProjectOpenshiftIoV1Api~replaceProjectOpenshiftIoV1ProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/ComGithubOpenshiftOriginPkgProjectApisProjectV1Project}
     */
    replaceProjectOpenshiftIoV1Project(name, body, opts, callback) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling replaceProjectOpenshiftIoV1Project");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling replaceProjectOpenshiftIoV1Project");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'];
      let returnType = ComGithubOpenshiftOriginPkgProjectApisProjectV1Project;

      return this.apiClient.callApi(
        '/apis/project.openshift.io/v1/projects/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchProjectOpenshiftIoV1Project operation.
     * @callback module:api/ProjectOpenshiftIoV1Api~watchProjectOpenshiftIoV1ProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch changes to an object of kind Project
     * @param {String} name name of the Project
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ProjectOpenshiftIoV1Api~watchProjectOpenshiftIoV1ProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchProjectOpenshiftIoV1Project(name, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling watchProjectOpenshiftIoV1Project");
      }


      let pathParams = {
        'name': name
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/project.openshift.io/v1/watch/projects/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the watchProjectOpenshiftIoV1ProjectList operation.
     * @callback module:api/ProjectOpenshiftIoV1Api~watchProjectOpenshiftIoV1ProjectListCallback
     * @param {String} error Error message, if any.
     * @param {module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * watch individual changes to a list of Project
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param {String} opts.labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param {String} opts.pretty If &#39;true&#39;, then the output is pretty printed.
     * @param {String} opts.resourceVersion When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
     * @param {Number} opts.timeoutSeconds Timeout for the list/watch call.
     * @param {Boolean} opts.watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param {module:api/ProjectOpenshiftIoV1Api~watchProjectOpenshiftIoV1ProjectListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:mikespgk/IoK8sApimachineryPkgApisMetaV1WatchEvent}
     */
    watchProjectOpenshiftIoV1ProjectList(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'fieldSelector': opts['fieldSelector'],
        'labelSelector': opts['labelSelector'],
        'pretty': opts['pretty'],
        'resourceVersion': opts['resourceVersion'],
        'timeoutSeconds': opts['timeoutSeconds'],
        'watch': opts['watch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerToken', 'Oauth2AccessToken', 'Oauth2Implicit'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf', 'application/json;stream=watch', 'application/vnd.kubernetes.protobuf;stream=watch'];
      let returnType = IoK8sApimachineryPkgApisMetaV1WatchEvent;

      return this.apiClient.callApi(
        '/apis/project.openshift.io/v1/watch/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
