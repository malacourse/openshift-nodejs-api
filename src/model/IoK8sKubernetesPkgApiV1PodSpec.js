/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: v3.6.173.0.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import IoK8sKubernetesPkgApiV1Affinity from './IoK8sKubernetesPkgApiV1Affinity';
import IoK8sKubernetesPkgApiV1Container from './IoK8sKubernetesPkgApiV1Container';
import IoK8sKubernetesPkgApiV1LocalObjectReference from './IoK8sKubernetesPkgApiV1LocalObjectReference';
import IoK8sKubernetesPkgApiV1PodSecurityContext from './IoK8sKubernetesPkgApiV1PodSecurityContext';
import IoK8sKubernetesPkgApiV1Toleration from './IoK8sKubernetesPkgApiV1Toleration';
import IoK8sKubernetesPkgApiV1Volume from './IoK8sKubernetesPkgApiV1Volume';





/**
* The IoK8sKubernetesPkgApiV1PodSpec model module.
* @module model/IoK8sKubernetesPkgApiV1PodSpec
* @version v3.6.173.0.21
*/
export default class IoK8sKubernetesPkgApiV1PodSpec {
    /**
    * Constructs a new <code>IoK8sKubernetesPkgApiV1PodSpec</code>.
    * PodSpec is a description of a pod.
    * @alias module:model/IoK8sKubernetesPkgApiV1PodSpec
    * @class
    * @param containers {Array.<module:model/IoK8sKubernetesPkgApiV1Container>} List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers
    */

    constructor(containers) {
        

        
        

        this['containers'] = containers;

        
    }

    /**
    * Constructs a <code>IoK8sKubernetesPkgApiV1PodSpec</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/IoK8sKubernetesPkgApiV1PodSpec} obj Optional instance to populate.
    * @return {module:model/IoK8sKubernetesPkgApiV1PodSpec} The populated <code>IoK8sKubernetesPkgApiV1PodSpec</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sKubernetesPkgApiV1PodSpec();

            
            
            

            if (data.hasOwnProperty('activeDeadlineSeconds')) {
                obj['activeDeadlineSeconds'] = ApiClient.convertToType(data['activeDeadlineSeconds'], 'Number');
            }
            if (data.hasOwnProperty('affinity')) {
                obj['affinity'] = IoK8sKubernetesPkgApiV1Affinity.constructFromObject(data['affinity']);
            }
            if (data.hasOwnProperty('automountServiceAccountToken')) {
                obj['automountServiceAccountToken'] = ApiClient.convertToType(data['automountServiceAccountToken'], 'Boolean');
            }
            if (data.hasOwnProperty('containers')) {
                obj['containers'] = ApiClient.convertToType(data['containers'], [IoK8sKubernetesPkgApiV1Container]);
            }
            if (data.hasOwnProperty('dnsPolicy')) {
                obj['dnsPolicy'] = ApiClient.convertToType(data['dnsPolicy'], 'String');
            }
            if (data.hasOwnProperty('hostIPC')) {
                obj['hostIPC'] = ApiClient.convertToType(data['hostIPC'], 'Boolean');
            }
            if (data.hasOwnProperty('hostNetwork')) {
                obj['hostNetwork'] = ApiClient.convertToType(data['hostNetwork'], 'Boolean');
            }
            if (data.hasOwnProperty('hostPID')) {
                obj['hostPID'] = ApiClient.convertToType(data['hostPID'], 'Boolean');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('imagePullSecrets')) {
                obj['imagePullSecrets'] = ApiClient.convertToType(data['imagePullSecrets'], [IoK8sKubernetesPkgApiV1LocalObjectReference]);
            }
            if (data.hasOwnProperty('initContainers')) {
                obj['initContainers'] = ApiClient.convertToType(data['initContainers'], [IoK8sKubernetesPkgApiV1Container]);
            }
            if (data.hasOwnProperty('nodeName')) {
                obj['nodeName'] = ApiClient.convertToType(data['nodeName'], 'String');
            }
            if (data.hasOwnProperty('nodeSelector')) {
                obj['nodeSelector'] = ApiClient.convertToType(data['nodeSelector'], {'String': 'String'});
            }
            if (data.hasOwnProperty('restartPolicy')) {
                obj['restartPolicy'] = ApiClient.convertToType(data['restartPolicy'], 'String');
            }
            if (data.hasOwnProperty('schedulerName')) {
                obj['schedulerName'] = ApiClient.convertToType(data['schedulerName'], 'String');
            }
            if (data.hasOwnProperty('securityContext')) {
                obj['securityContext'] = IoK8sKubernetesPkgApiV1PodSecurityContext.constructFromObject(data['securityContext']);
            }
            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('serviceAccountName')) {
                obj['serviceAccountName'] = ApiClient.convertToType(data['serviceAccountName'], 'String');
            }
            if (data.hasOwnProperty('subdomain')) {
                obj['subdomain'] = ApiClient.convertToType(data['subdomain'], 'String');
            }
            if (data.hasOwnProperty('terminationGracePeriodSeconds')) {
                obj['terminationGracePeriodSeconds'] = ApiClient.convertToType(data['terminationGracePeriodSeconds'], 'Number');
            }
            if (data.hasOwnProperty('tolerations')) {
                obj['tolerations'] = ApiClient.convertToType(data['tolerations'], [IoK8sKubernetesPkgApiV1Toleration]);
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], [IoK8sKubernetesPkgApiV1Volume]);
            }
        }
        return obj;
    }

    /**
    * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
    * @member {Number} activeDeadlineSeconds
    */
    activeDeadlineSeconds = undefined;
    /**
    * If specified, the pod's scheduling constraints
    * @member {module:model/IoK8sKubernetesPkgApiV1Affinity} affinity
    */
    affinity = undefined;
    /**
    * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
    * @member {Boolean} automountServiceAccountToken
    */
    automountServiceAccountToken = undefined;
    /**
    * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers
    * @member {Array.<module:model/IoK8sKubernetesPkgApiV1Container>} containers
    */
    containers = undefined;
    /**
    * Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
    * @member {String} dnsPolicy
    */
    dnsPolicy = undefined;
    /**
    * Use the host's ipc namespace. Optional: Default to false.
    * @member {Boolean} hostIPC
    */
    hostIPC = undefined;
    /**
    * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
    * @member {Boolean} hostNetwork
    */
    hostNetwork = undefined;
    /**
    * Use the host's pid namespace. Optional: Default to false.
    * @member {Boolean} hostPID
    */
    hostPID = undefined;
    /**
    * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
    * @member {String} hostname
    */
    hostname = undefined;
    /**
    * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
    * @member {Array.<module:model/IoK8sKubernetesPkgApiV1LocalObjectReference>} imagePullSecrets
    */
    imagePullSecrets = undefined;
    /**
    * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers
    * @member {Array.<module:model/IoK8sKubernetesPkgApiV1Container>} initContainers
    */
    initContainers = undefined;
    /**
    * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
    * @member {String} nodeName
    */
    nodeName = undefined;
    /**
    * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://kubernetes.io/docs/user-guide/node-selection/README
    * @member {Object.<String, String>} nodeSelector
    */
    nodeSelector = undefined;
    /**
    * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: http://kubernetes.io/docs/user-guide/pod-states#restartpolicy
    * @member {String} restartPolicy
    */
    restartPolicy = undefined;
    /**
    * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
    * @member {String} schedulerName
    */
    schedulerName = undefined;
    /**
    * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
    * @member {module:model/IoK8sKubernetesPkgApiV1PodSecurityContext} securityContext
    */
    securityContext = undefined;
    /**
    * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
    * @member {String} serviceAccount
    */
    serviceAccount = undefined;
    /**
    * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md
    * @member {String} serviceAccountName
    */
    serviceAccountName = undefined;
    /**
    * If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.
    * @member {String} subdomain
    */
    subdomain = undefined;
    /**
    * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
    * @member {Number} terminationGracePeriodSeconds
    */
    terminationGracePeriodSeconds = undefined;
    /**
    * If specified, the pod's tolerations.
    * @member {Array.<module:model/IoK8sKubernetesPkgApiV1Toleration>} tolerations
    */
    tolerations = undefined;
    /**
    * List of volumes that can be mounted by containers belonging to the pod. More info: http://kubernetes.io/docs/user-guide/volumes
    * @member {Array.<module:model/IoK8sKubernetesPkgApiV1Volume>} volumes
    */
    volumes = undefined;








}


