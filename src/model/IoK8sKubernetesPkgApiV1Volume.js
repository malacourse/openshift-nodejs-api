/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: v3.6.173.0.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import IoK8sKubernetesPkgApiV1AWSElasticBlockStoreVolumeSource from './IoK8sKubernetesPkgApiV1AWSElasticBlockStoreVolumeSource';
import IoK8sKubernetesPkgApiV1AzureDiskVolumeSource from './IoK8sKubernetesPkgApiV1AzureDiskVolumeSource';
import IoK8sKubernetesPkgApiV1AzureFileVolumeSource from './IoK8sKubernetesPkgApiV1AzureFileVolumeSource';
import IoK8sKubernetesPkgApiV1CephFSVolumeSource from './IoK8sKubernetesPkgApiV1CephFSVolumeSource';
import IoK8sKubernetesPkgApiV1CinderVolumeSource from './IoK8sKubernetesPkgApiV1CinderVolumeSource';
import IoK8sKubernetesPkgApiV1ConfigMapVolumeSource from './IoK8sKubernetesPkgApiV1ConfigMapVolumeSource';
import IoK8sKubernetesPkgApiV1DeprecatedDownwardAPIVolumeSource from './IoK8sKubernetesPkgApiV1DeprecatedDownwardAPIVolumeSource';
import IoK8sKubernetesPkgApiV1DownwardAPIVolumeSource from './IoK8sKubernetesPkgApiV1DownwardAPIVolumeSource';
import IoK8sKubernetesPkgApiV1EmptyDirVolumeSource from './IoK8sKubernetesPkgApiV1EmptyDirVolumeSource';
import IoK8sKubernetesPkgApiV1FCVolumeSource from './IoK8sKubernetesPkgApiV1FCVolumeSource';
import IoK8sKubernetesPkgApiV1FlexVolumeSource from './IoK8sKubernetesPkgApiV1FlexVolumeSource';
import IoK8sKubernetesPkgApiV1FlockerVolumeSource from './IoK8sKubernetesPkgApiV1FlockerVolumeSource';
import IoK8sKubernetesPkgApiV1GCEPersistentDiskVolumeSource from './IoK8sKubernetesPkgApiV1GCEPersistentDiskVolumeSource';
import IoK8sKubernetesPkgApiV1GitRepoVolumeSource from './IoK8sKubernetesPkgApiV1GitRepoVolumeSource';
import IoK8sKubernetesPkgApiV1GlusterfsVolumeSource from './IoK8sKubernetesPkgApiV1GlusterfsVolumeSource';
import IoK8sKubernetesPkgApiV1HostPathVolumeSource from './IoK8sKubernetesPkgApiV1HostPathVolumeSource';
import IoK8sKubernetesPkgApiV1ISCSIVolumeSource from './IoK8sKubernetesPkgApiV1ISCSIVolumeSource';
import IoK8sKubernetesPkgApiV1NFSVolumeSource from './IoK8sKubernetesPkgApiV1NFSVolumeSource';
import IoK8sKubernetesPkgApiV1PersistentVolumeClaimVolumeSource from './IoK8sKubernetesPkgApiV1PersistentVolumeClaimVolumeSource';
import IoK8sKubernetesPkgApiV1PhotonPersistentDiskVolumeSource from './IoK8sKubernetesPkgApiV1PhotonPersistentDiskVolumeSource';
import IoK8sKubernetesPkgApiV1PortworxVolumeSource from './IoK8sKubernetesPkgApiV1PortworxVolumeSource';
import IoK8sKubernetesPkgApiV1ProjectedVolumeSource from './IoK8sKubernetesPkgApiV1ProjectedVolumeSource';
import IoK8sKubernetesPkgApiV1QuobyteVolumeSource from './IoK8sKubernetesPkgApiV1QuobyteVolumeSource';
import IoK8sKubernetesPkgApiV1RBDVolumeSource from './IoK8sKubernetesPkgApiV1RBDVolumeSource';
import IoK8sKubernetesPkgApiV1ScaleIOVolumeSource from './IoK8sKubernetesPkgApiV1ScaleIOVolumeSource';
import IoK8sKubernetesPkgApiV1SecretVolumeSource from './IoK8sKubernetesPkgApiV1SecretVolumeSource';
import IoK8sKubernetesPkgApiV1VsphereVirtualDiskVolumeSource from './IoK8sKubernetesPkgApiV1VsphereVirtualDiskVolumeSource';





/**
* The IoK8sKubernetesPkgApiV1Volume model module.
* @module model/IoK8sKubernetesPkgApiV1Volume
* @version v3.6.173.0.21
*/
export default class IoK8sKubernetesPkgApiV1Volume {
    /**
    * Constructs a new <code>IoK8sKubernetesPkgApiV1Volume</code>.
    * Volume represents a named volume in a pod that may be accessed by any container in the pod.
    * @alias module:model/IoK8sKubernetesPkgApiV1Volume
    * @class
    * @param name {String} Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    */

    constructor(name) {
        

        
        

        this['name'] = name;

        
    }

    /**
    * Constructs a <code>IoK8sKubernetesPkgApiV1Volume</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/IoK8sKubernetesPkgApiV1Volume} obj Optional instance to populate.
    * @return {module:model/IoK8sKubernetesPkgApiV1Volume} The populated <code>IoK8sKubernetesPkgApiV1Volume</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IoK8sKubernetesPkgApiV1Volume();

            
            
            

            if (data.hasOwnProperty('awsElasticBlockStore')) {
                obj['awsElasticBlockStore'] = IoK8sKubernetesPkgApiV1AWSElasticBlockStoreVolumeSource.constructFromObject(data['awsElasticBlockStore']);
            }
            if (data.hasOwnProperty('azureDisk')) {
                obj['azureDisk'] = IoK8sKubernetesPkgApiV1AzureDiskVolumeSource.constructFromObject(data['azureDisk']);
            }
            if (data.hasOwnProperty('azureFile')) {
                obj['azureFile'] = IoK8sKubernetesPkgApiV1AzureFileVolumeSource.constructFromObject(data['azureFile']);
            }
            if (data.hasOwnProperty('cephfs')) {
                obj['cephfs'] = IoK8sKubernetesPkgApiV1CephFSVolumeSource.constructFromObject(data['cephfs']);
            }
            if (data.hasOwnProperty('cinder')) {
                obj['cinder'] = IoK8sKubernetesPkgApiV1CinderVolumeSource.constructFromObject(data['cinder']);
            }
            if (data.hasOwnProperty('configMap')) {
                obj['configMap'] = IoK8sKubernetesPkgApiV1ConfigMapVolumeSource.constructFromObject(data['configMap']);
            }
            if (data.hasOwnProperty('downwardAPI')) {
                obj['downwardAPI'] = IoK8sKubernetesPkgApiV1DownwardAPIVolumeSource.constructFromObject(data['downwardAPI']);
            }
            if (data.hasOwnProperty('emptyDir')) {
                obj['emptyDir'] = IoK8sKubernetesPkgApiV1EmptyDirVolumeSource.constructFromObject(data['emptyDir']);
            }
            if (data.hasOwnProperty('fc')) {
                obj['fc'] = IoK8sKubernetesPkgApiV1FCVolumeSource.constructFromObject(data['fc']);
            }
            if (data.hasOwnProperty('flexVolume')) {
                obj['flexVolume'] = IoK8sKubernetesPkgApiV1FlexVolumeSource.constructFromObject(data['flexVolume']);
            }
            if (data.hasOwnProperty('flocker')) {
                obj['flocker'] = IoK8sKubernetesPkgApiV1FlockerVolumeSource.constructFromObject(data['flocker']);
            }
            if (data.hasOwnProperty('gcePersistentDisk')) {
                obj['gcePersistentDisk'] = IoK8sKubernetesPkgApiV1GCEPersistentDiskVolumeSource.constructFromObject(data['gcePersistentDisk']);
            }
            if (data.hasOwnProperty('gitRepo')) {
                obj['gitRepo'] = IoK8sKubernetesPkgApiV1GitRepoVolumeSource.constructFromObject(data['gitRepo']);
            }
            if (data.hasOwnProperty('glusterfs')) {
                obj['glusterfs'] = IoK8sKubernetesPkgApiV1GlusterfsVolumeSource.constructFromObject(data['glusterfs']);
            }
            if (data.hasOwnProperty('hostPath')) {
                obj['hostPath'] = IoK8sKubernetesPkgApiV1HostPathVolumeSource.constructFromObject(data['hostPath']);
            }
            if (data.hasOwnProperty('iscsi')) {
                obj['iscsi'] = IoK8sKubernetesPkgApiV1ISCSIVolumeSource.constructFromObject(data['iscsi']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = IoK8sKubernetesPkgApiV1DeprecatedDownwardAPIVolumeSource.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nfs')) {
                obj['nfs'] = IoK8sKubernetesPkgApiV1NFSVolumeSource.constructFromObject(data['nfs']);
            }
            if (data.hasOwnProperty('persistentVolumeClaim')) {
                obj['persistentVolumeClaim'] = IoK8sKubernetesPkgApiV1PersistentVolumeClaimVolumeSource.constructFromObject(data['persistentVolumeClaim']);
            }
            if (data.hasOwnProperty('photonPersistentDisk')) {
                obj['photonPersistentDisk'] = IoK8sKubernetesPkgApiV1PhotonPersistentDiskVolumeSource.constructFromObject(data['photonPersistentDisk']);
            }
            if (data.hasOwnProperty('portworxVolume')) {
                obj['portworxVolume'] = IoK8sKubernetesPkgApiV1PortworxVolumeSource.constructFromObject(data['portworxVolume']);
            }
            if (data.hasOwnProperty('projected')) {
                obj['projected'] = IoK8sKubernetesPkgApiV1ProjectedVolumeSource.constructFromObject(data['projected']);
            }
            if (data.hasOwnProperty('quobyte')) {
                obj['quobyte'] = IoK8sKubernetesPkgApiV1QuobyteVolumeSource.constructFromObject(data['quobyte']);
            }
            if (data.hasOwnProperty('rbd')) {
                obj['rbd'] = IoK8sKubernetesPkgApiV1RBDVolumeSource.constructFromObject(data['rbd']);
            }
            if (data.hasOwnProperty('scaleIO')) {
                obj['scaleIO'] = IoK8sKubernetesPkgApiV1ScaleIOVolumeSource.constructFromObject(data['scaleIO']);
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = IoK8sKubernetesPkgApiV1SecretVolumeSource.constructFromObject(data['secret']);
            }
            if (data.hasOwnProperty('vsphereVolume')) {
                obj['vsphereVolume'] = IoK8sKubernetesPkgApiV1VsphereVirtualDiskVolumeSource.constructFromObject(data['vsphereVolume']);
            }
        }
        return obj;
    }

    /**
    * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
    * @member {module:model/IoK8sKubernetesPkgApiV1AWSElasticBlockStoreVolumeSource} awsElasticBlockStore
    */
    awsElasticBlockStore = undefined;
    /**
    * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    * @member {module:model/IoK8sKubernetesPkgApiV1AzureDiskVolumeSource} azureDisk
    */
    azureDisk = undefined;
    /**
    * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    * @member {module:model/IoK8sKubernetesPkgApiV1AzureFileVolumeSource} azureFile
    */
    azureFile = undefined;
    /**
    * CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    * @member {module:model/IoK8sKubernetesPkgApiV1CephFSVolumeSource} cephfs
    */
    cephfs = undefined;
    /**
    * Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
    * @member {module:model/IoK8sKubernetesPkgApiV1CinderVolumeSource} cinder
    */
    cinder = undefined;
    /**
    * ConfigMap represents a configMap that should populate this volume
    * @member {module:model/IoK8sKubernetesPkgApiV1ConfigMapVolumeSource} configMap
    */
    configMap = undefined;
    /**
    * DownwardAPI represents downward API about the pod that should populate this volume
    * @member {module:model/IoK8sKubernetesPkgApiV1DownwardAPIVolumeSource} downwardAPI
    */
    downwardAPI = undefined;
    /**
    * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
    * @member {module:model/IoK8sKubernetesPkgApiV1EmptyDirVolumeSource} emptyDir
    */
    emptyDir = undefined;
    /**
    * FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    * @member {module:model/IoK8sKubernetesPkgApiV1FCVolumeSource} fc
    */
    fc = undefined;
    /**
    * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
    * @member {module:model/IoK8sKubernetesPkgApiV1FlexVolumeSource} flexVolume
    */
    flexVolume = undefined;
    /**
    * Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
    * @member {module:model/IoK8sKubernetesPkgApiV1FlockerVolumeSource} flocker
    */
    flocker = undefined;
    /**
    * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
    * @member {module:model/IoK8sKubernetesPkgApiV1GCEPersistentDiskVolumeSource} gcePersistentDisk
    */
    gcePersistentDisk = undefined;
    /**
    * GitRepo represents a git repository at a particular revision.
    * @member {module:model/IoK8sKubernetesPkgApiV1GitRepoVolumeSource} gitRepo
    */
    gitRepo = undefined;
    /**
    * Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
    * @member {module:model/IoK8sKubernetesPkgApiV1GlusterfsVolumeSource} glusterfs
    */
    glusterfs = undefined;
    /**
    * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath
    * @member {module:model/IoK8sKubernetesPkgApiV1HostPathVolumeSource} hostPath
    */
    hostPath = undefined;
    /**
    * ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md
    * @member {module:model/IoK8sKubernetesPkgApiV1ISCSIVolumeSource} iscsi
    */
    iscsi = undefined;
    /**
    * Metadata represents metadata about the pod that should populate this volume Deprecated: Use downwardAPI instead.
    * @member {module:model/IoK8sKubernetesPkgApiV1DeprecatedDownwardAPIVolumeSource} metadata
    */
    metadata = undefined;
    /**
    * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    * @member {String} name
    */
    name = undefined;
    /**
    * NFS represents an NFS mount on the host that shares a pod's lifetime More info: http://kubernetes.io/docs/user-guide/volumes#nfs
    * @member {module:model/IoK8sKubernetesPkgApiV1NFSVolumeSource} nfs
    */
    nfs = undefined;
    /**
    * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims
    * @member {module:model/IoK8sKubernetesPkgApiV1PersistentVolumeClaimVolumeSource} persistentVolumeClaim
    */
    persistentVolumeClaim = undefined;
    /**
    * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    * @member {module:model/IoK8sKubernetesPkgApiV1PhotonPersistentDiskVolumeSource} photonPersistentDisk
    */
    photonPersistentDisk = undefined;
    /**
    * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
    * @member {module:model/IoK8sKubernetesPkgApiV1PortworxVolumeSource} portworxVolume
    */
    portworxVolume = undefined;
    /**
    * Items for all in one resources secrets, configmaps, and downward API
    * @member {module:model/IoK8sKubernetesPkgApiV1ProjectedVolumeSource} projected
    */
    projected = undefined;
    /**
    * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    * @member {module:model/IoK8sKubernetesPkgApiV1QuobyteVolumeSource} quobyte
    */
    quobyte = undefined;
    /**
    * RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
    * @member {module:model/IoK8sKubernetesPkgApiV1RBDVolumeSource} rbd
    */
    rbd = undefined;
    /**
    * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    * @member {module:model/IoK8sKubernetesPkgApiV1ScaleIOVolumeSource} scaleIO
    */
    scaleIO = undefined;
    /**
    * Secret represents a secret that should populate this volume. More info: http://kubernetes.io/docs/user-guide/volumes#secrets
    * @member {module:model/IoK8sKubernetesPkgApiV1SecretVolumeSource} secret
    */
    secret = undefined;
    /**
    * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    * @member {module:model/IoK8sKubernetesPkgApiV1VsphereVirtualDiskVolumeSource} vsphereVolume
    */
    vsphereVolume = undefined;








}


