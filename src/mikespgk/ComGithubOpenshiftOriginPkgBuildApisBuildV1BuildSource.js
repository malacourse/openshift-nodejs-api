/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: v3.6.173.0.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import ComGithubOpenshiftOriginPkgBuildApisBuildV1BinaryBuildSource from './ComGithubOpenshiftOriginPkgBuildApisBuildV1BinaryBuildSource';
import ComGithubOpenshiftOriginPkgBuildApisBuildV1GitBuildSource from './ComGithubOpenshiftOriginPkgBuildApisBuildV1GitBuildSource';
import ComGithubOpenshiftOriginPkgBuildApisBuildV1ImageSource from './ComGithubOpenshiftOriginPkgBuildApisBuildV1ImageSource';
import ComGithubOpenshiftOriginPkgBuildApisBuildV1SecretBuildSource from './ComGithubOpenshiftOriginPkgBuildApisBuildV1SecretBuildSource';
import IoK8sKubernetesPkgApiV1LocalObjectReference from './IoK8sKubernetesPkgApiV1LocalObjectReference';





/**
* The ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildSource model module.
* @module mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildSource
* @version v3.6.173.0.21
*/
export default class ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildSource {
    /**
    * Constructs a new <code>ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildSource</code>.
    * BuildSource is the SCM used for the build.
    * @alias module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildSource
    * @class
    * @param type {String} type of build input to accept
    */

    constructor(type) {
        

        
        

        this['type'] = type;

        
    }

    /**
    * Constructs a <code>ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildSource</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildSource} obj Optional instance to populate.
    * @return {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildSource} The populated <code>ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildSource</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComGithubOpenshiftOriginPkgBuildApisBuildV1BuildSource();

            
            
            

            if (data.hasOwnProperty('binary')) {
                obj['binary'] = ComGithubOpenshiftOriginPkgBuildApisBuildV1BinaryBuildSource.constructFromObject(data['binary']);
            }
            if (data.hasOwnProperty('contextDir')) {
                obj['contextDir'] = ApiClient.convertToType(data['contextDir'], 'String');
            }
            if (data.hasOwnProperty('dockerfile')) {
                obj['dockerfile'] = ApiClient.convertToType(data['dockerfile'], 'String');
            }
            if (data.hasOwnProperty('git')) {
                obj['git'] = ComGithubOpenshiftOriginPkgBuildApisBuildV1GitBuildSource.constructFromObject(data['git']);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [ComGithubOpenshiftOriginPkgBuildApisBuildV1ImageSource]);
            }
            if (data.hasOwnProperty('secrets')) {
                obj['secrets'] = ApiClient.convertToType(data['secrets'], [ComGithubOpenshiftOriginPkgBuildApisBuildV1SecretBuildSource]);
            }
            if (data.hasOwnProperty('sourceSecret')) {
                obj['sourceSecret'] = IoK8sKubernetesPkgApiV1LocalObjectReference.constructFromObject(data['sourceSecret']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
    * binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy. For Docker builds, this is the build context and an optional Dockerfile may be specified to override any Dockerfile in the build context. For Source builds, this is assumed to be an archive as described above. For Source and Docker builds, if binary.asFile is set the build will receive a directory with a single file. contextDir may be used when an archive is provided. Custom builds will receive this binary as input on STDIN.
    * @member {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1BinaryBuildSource} binary
    */
    binary = undefined;
    /**
    * contextDir specifies the sub-directory where the source code for the application exists. This allows to have buildable sources in directory other than root of repository.
    * @member {String} contextDir
    */
    contextDir = undefined;
    /**
    * dockerfile is the raw contents of a Dockerfile which should be built. When this option is specified, the FROM may be modified based on your strategy base image and additional ENV stanzas from your strategy environment will be added after the FROM, but before the rest of your Dockerfile stanzas. The Dockerfile source type may be used with other options like git - in those cases the Git repo will have any innate Dockerfile replaced in the context dir.
    * @member {String} dockerfile
    */
    dockerfile = undefined;
    /**
    * git contains optional information about git build source
    * @member {module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1GitBuildSource} git
    */
    git = undefined;
    /**
    * images describes a set of images to be used to provide source for the build
    * @member {Array.<module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1ImageSource>} images
    */
    images = undefined;
    /**
    * secrets represents a list of secrets and their destinations that will be used only for the build.
    * @member {Array.<module:mikespgk/ComGithubOpenshiftOriginPkgBuildApisBuildV1SecretBuildSource>} secrets
    */
    secrets = undefined;
    /**
    * sourceSecret is the name of a Secret that would be used for setting up the authentication for cloning private repository. The secret contains valid credentials for remote repository, where the data's key represent the authentication method to be used and value is the base64 encoded credentials. Supported auth methods are: ssh-privatekey.
    * @member {module:mikespgk/IoK8sKubernetesPkgApiV1LocalObjectReference} sourceSecret
    */
    sourceSecret = undefined;
    /**
    * type of build input to accept
    * @member {String} type
    */
    type = undefined;








}


