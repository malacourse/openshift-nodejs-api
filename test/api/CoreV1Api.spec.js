/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: v3.6.173.0.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenShiftApiWithKubernetes);
  }
}(this, function(expect, OpenShiftApiWithKubernetes) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenShiftApiWithKubernetes.CoreV1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CoreV1Api', function() {
    describe('connectCoreV1DeleteNamespacedPodProxy', function() {
      it('should call connectCoreV1DeleteNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNamespacedPodProxy
        //instance.connectCoreV1DeleteNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1DeleteNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1DeleteNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNamespacedPodProxyWithPath
        //instance.connectCoreV1DeleteNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1DeleteNamespacedServiceProxy', function() {
      it('should call connectCoreV1DeleteNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNamespacedServiceProxy
        //instance.connectCoreV1DeleteNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1DeleteNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1DeleteNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNamespacedServiceProxyWithPath
        //instance.connectCoreV1DeleteNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1DeleteNodeProxy', function() {
      it('should call connectCoreV1DeleteNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNodeProxy
        //instance.connectCoreV1DeleteNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1DeleteNodeProxyWithPath', function() {
      it('should call connectCoreV1DeleteNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1DeleteNodeProxyWithPath
        //instance.connectCoreV1DeleteNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedPodAttach', function() {
      it('should call connectCoreV1GetNamespacedPodAttach successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedPodAttach
        //instance.connectCoreV1GetNamespacedPodAttach(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedPodExec', function() {
      it('should call connectCoreV1GetNamespacedPodExec successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedPodExec
        //instance.connectCoreV1GetNamespacedPodExec(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedPodPortforward', function() {
      it('should call connectCoreV1GetNamespacedPodPortforward successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedPodPortforward
        //instance.connectCoreV1GetNamespacedPodPortforward(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedPodProxy', function() {
      it('should call connectCoreV1GetNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedPodProxy
        //instance.connectCoreV1GetNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1GetNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedPodProxyWithPath
        //instance.connectCoreV1GetNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedServiceProxy', function() {
      it('should call connectCoreV1GetNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedServiceProxy
        //instance.connectCoreV1GetNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1GetNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNamespacedServiceProxyWithPath
        //instance.connectCoreV1GetNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNodeProxy', function() {
      it('should call connectCoreV1GetNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNodeProxy
        //instance.connectCoreV1GetNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1GetNodeProxyWithPath', function() {
      it('should call connectCoreV1GetNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1GetNodeProxyWithPath
        //instance.connectCoreV1GetNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNamespacedPodProxy', function() {
      it('should call connectCoreV1HeadNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNamespacedPodProxy
        //instance.connectCoreV1HeadNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1HeadNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNamespacedPodProxyWithPath
        //instance.connectCoreV1HeadNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNamespacedServiceProxy', function() {
      it('should call connectCoreV1HeadNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNamespacedServiceProxy
        //instance.connectCoreV1HeadNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1HeadNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNamespacedServiceProxyWithPath
        //instance.connectCoreV1HeadNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNodeProxy', function() {
      it('should call connectCoreV1HeadNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNodeProxy
        //instance.connectCoreV1HeadNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1HeadNodeProxyWithPath', function() {
      it('should call connectCoreV1HeadNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1HeadNodeProxyWithPath
        //instance.connectCoreV1HeadNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNamespacedPodProxy', function() {
      it('should call connectCoreV1OptionsNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNamespacedPodProxy
        //instance.connectCoreV1OptionsNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1OptionsNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNamespacedPodProxyWithPath
        //instance.connectCoreV1OptionsNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNamespacedServiceProxy', function() {
      it('should call connectCoreV1OptionsNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNamespacedServiceProxy
        //instance.connectCoreV1OptionsNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1OptionsNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNamespacedServiceProxyWithPath
        //instance.connectCoreV1OptionsNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNodeProxy', function() {
      it('should call connectCoreV1OptionsNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNodeProxy
        //instance.connectCoreV1OptionsNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1OptionsNodeProxyWithPath', function() {
      it('should call connectCoreV1OptionsNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1OptionsNodeProxyWithPath
        //instance.connectCoreV1OptionsNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedPodAttach', function() {
      it('should call connectCoreV1PostNamespacedPodAttach successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedPodAttach
        //instance.connectCoreV1PostNamespacedPodAttach(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedPodExec', function() {
      it('should call connectCoreV1PostNamespacedPodExec successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedPodExec
        //instance.connectCoreV1PostNamespacedPodExec(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedPodPortforward', function() {
      it('should call connectCoreV1PostNamespacedPodPortforward successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedPodPortforward
        //instance.connectCoreV1PostNamespacedPodPortforward(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedPodProxy', function() {
      it('should call connectCoreV1PostNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedPodProxy
        //instance.connectCoreV1PostNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1PostNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedPodProxyWithPath
        //instance.connectCoreV1PostNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedServiceProxy', function() {
      it('should call connectCoreV1PostNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedServiceProxy
        //instance.connectCoreV1PostNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1PostNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNamespacedServiceProxyWithPath
        //instance.connectCoreV1PostNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNodeProxy', function() {
      it('should call connectCoreV1PostNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNodeProxy
        //instance.connectCoreV1PostNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PostNodeProxyWithPath', function() {
      it('should call connectCoreV1PostNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PostNodeProxyWithPath
        //instance.connectCoreV1PostNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNamespacedPodProxy', function() {
      it('should call connectCoreV1PutNamespacedPodProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNamespacedPodProxy
        //instance.connectCoreV1PutNamespacedPodProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNamespacedPodProxyWithPath', function() {
      it('should call connectCoreV1PutNamespacedPodProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNamespacedPodProxyWithPath
        //instance.connectCoreV1PutNamespacedPodProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNamespacedServiceProxy', function() {
      it('should call connectCoreV1PutNamespacedServiceProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNamespacedServiceProxy
        //instance.connectCoreV1PutNamespacedServiceProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNamespacedServiceProxyWithPath', function() {
      it('should call connectCoreV1PutNamespacedServiceProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNamespacedServiceProxyWithPath
        //instance.connectCoreV1PutNamespacedServiceProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNodeProxy', function() {
      it('should call connectCoreV1PutNodeProxy successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNodeProxy
        //instance.connectCoreV1PutNodeProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectCoreV1PutNodeProxyWithPath', function() {
      it('should call connectCoreV1PutNodeProxyWithPath successfully', function(done) {
        //uncomment below and update the code to test connectCoreV1PutNodeProxyWithPath
        //instance.connectCoreV1PutNodeProxyWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1BindingForAllNamespaces', function() {
      it('should call createCoreV1BindingForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1BindingForAllNamespaces
        //instance.createCoreV1BindingForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1ConfigMapForAllNamespaces', function() {
      it('should call createCoreV1ConfigMapForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1ConfigMapForAllNamespaces
        //instance.createCoreV1ConfigMapForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1EndpointsForAllNamespaces', function() {
      it('should call createCoreV1EndpointsForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1EndpointsForAllNamespaces
        //instance.createCoreV1EndpointsForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1EventForAllNamespaces', function() {
      it('should call createCoreV1EventForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1EventForAllNamespaces
        //instance.createCoreV1EventForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1LimitRangeForAllNamespaces', function() {
      it('should call createCoreV1LimitRangeForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1LimitRangeForAllNamespaces
        //instance.createCoreV1LimitRangeForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1Namespace', function() {
      it('should call createCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test createCoreV1Namespace
        //instance.createCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedBinding', function() {
      it('should call createCoreV1NamespacedBinding successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedBinding
        //instance.createCoreV1NamespacedBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedBindingBinding', function() {
      it('should call createCoreV1NamespacedBindingBinding successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedBindingBinding
        //instance.createCoreV1NamespacedBindingBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedConfigMap', function() {
      it('should call createCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedConfigMap
        //instance.createCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedEndpoints', function() {
      it('should call createCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedEndpoints
        //instance.createCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedEvent', function() {
      it('should call createCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedEvent
        //instance.createCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedEvictionEviction', function() {
      it('should call createCoreV1NamespacedEvictionEviction successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedEvictionEviction
        //instance.createCoreV1NamespacedEvictionEviction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedLimitRange', function() {
      it('should call createCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedLimitRange
        //instance.createCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call createCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedPersistentVolumeClaim
        //instance.createCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedPod', function() {
      it('should call createCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedPod
        //instance.createCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedPodTemplate', function() {
      it('should call createCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedPodTemplate
        //instance.createCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedReplicationController', function() {
      it('should call createCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedReplicationController
        //instance.createCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedResourceQuota', function() {
      it('should call createCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedResourceQuota
        //instance.createCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedSecret', function() {
      it('should call createCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedSecret
        //instance.createCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedService', function() {
      it('should call createCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedService
        //instance.createCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1NamespacedServiceAccount', function() {
      it('should call createCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test createCoreV1NamespacedServiceAccount
        //instance.createCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1Node', function() {
      it('should call createCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test createCoreV1Node
        //instance.createCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1PersistentVolume', function() {
      it('should call createCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test createCoreV1PersistentVolume
        //instance.createCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1PersistentVolumeClaimForAllNamespaces', function() {
      it('should call createCoreV1PersistentVolumeClaimForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1PersistentVolumeClaimForAllNamespaces
        //instance.createCoreV1PersistentVolumeClaimForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1PodForAllNamespaces', function() {
      it('should call createCoreV1PodForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1PodForAllNamespaces
        //instance.createCoreV1PodForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1PodTemplateForAllNamespaces', function() {
      it('should call createCoreV1PodTemplateForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1PodTemplateForAllNamespaces
        //instance.createCoreV1PodTemplateForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1ReplicationControllerForAllNamespaces', function() {
      it('should call createCoreV1ReplicationControllerForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1ReplicationControllerForAllNamespaces
        //instance.createCoreV1ReplicationControllerForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1ResourceQuotaForAllNamespaces', function() {
      it('should call createCoreV1ResourceQuotaForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1ResourceQuotaForAllNamespaces
        //instance.createCoreV1ResourceQuotaForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1SecretForAllNamespaces', function() {
      it('should call createCoreV1SecretForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1SecretForAllNamespaces
        //instance.createCoreV1SecretForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1SecurityContextConstraints', function() {
      it('should call createCoreV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test createCoreV1SecurityContextConstraints
        //instance.createCoreV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1ServiceAccountForAllNamespaces', function() {
      it('should call createCoreV1ServiceAccountForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1ServiceAccountForAllNamespaces
        //instance.createCoreV1ServiceAccountForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCoreV1ServiceForAllNamespaces', function() {
      it('should call createCoreV1ServiceForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createCoreV1ServiceForAllNamespaces
        //instance.createCoreV1ServiceForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespace', function() {
      it('should call deleteCoreV1CollectionNamespace successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespace
        //instance.deleteCoreV1CollectionNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedConfigMap', function() {
      it('should call deleteCoreV1CollectionNamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedConfigMap
        //instance.deleteCoreV1CollectionNamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedEndpoints', function() {
      it('should call deleteCoreV1CollectionNamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedEndpoints
        //instance.deleteCoreV1CollectionNamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedEvent', function() {
      it('should call deleteCoreV1CollectionNamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedEvent
        //instance.deleteCoreV1CollectionNamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedLimitRange', function() {
      it('should call deleteCoreV1CollectionNamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedLimitRange
        //instance.deleteCoreV1CollectionNamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedPersistentVolumeClaim', function() {
      it('should call deleteCoreV1CollectionNamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedPersistentVolumeClaim
        //instance.deleteCoreV1CollectionNamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedPod', function() {
      it('should call deleteCoreV1CollectionNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedPod
        //instance.deleteCoreV1CollectionNamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedPodTemplate', function() {
      it('should call deleteCoreV1CollectionNamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedPodTemplate
        //instance.deleteCoreV1CollectionNamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedReplicationController', function() {
      it('should call deleteCoreV1CollectionNamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedReplicationController
        //instance.deleteCoreV1CollectionNamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedResourceQuota', function() {
      it('should call deleteCoreV1CollectionNamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedResourceQuota
        //instance.deleteCoreV1CollectionNamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedSecret', function() {
      it('should call deleteCoreV1CollectionNamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedSecret
        //instance.deleteCoreV1CollectionNamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNamespacedServiceAccount', function() {
      it('should call deleteCoreV1CollectionNamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNamespacedServiceAccount
        //instance.deleteCoreV1CollectionNamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionNode', function() {
      it('should call deleteCoreV1CollectionNode successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionNode
        //instance.deleteCoreV1CollectionNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionPersistentVolume', function() {
      it('should call deleteCoreV1CollectionPersistentVolume successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionPersistentVolume
        //instance.deleteCoreV1CollectionPersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1CollectionSecurityContextConstraints', function() {
      it('should call deleteCoreV1CollectionSecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1CollectionSecurityContextConstraints
        //instance.deleteCoreV1CollectionSecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1Namespace', function() {
      it('should call deleteCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1Namespace
        //instance.deleteCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedConfigMap', function() {
      it('should call deleteCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedConfigMap
        //instance.deleteCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedEndpoints', function() {
      it('should call deleteCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedEndpoints
        //instance.deleteCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedEvent', function() {
      it('should call deleteCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedEvent
        //instance.deleteCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedLimitRange', function() {
      it('should call deleteCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedLimitRange
        //instance.deleteCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call deleteCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedPersistentVolumeClaim
        //instance.deleteCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedPod', function() {
      it('should call deleteCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedPod
        //instance.deleteCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedPodTemplate', function() {
      it('should call deleteCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedPodTemplate
        //instance.deleteCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedReplicationController', function() {
      it('should call deleteCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedReplicationController
        //instance.deleteCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedResourceQuota', function() {
      it('should call deleteCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedResourceQuota
        //instance.deleteCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedSecret', function() {
      it('should call deleteCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedSecret
        //instance.deleteCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedService', function() {
      it('should call deleteCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedService
        //instance.deleteCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1NamespacedServiceAccount', function() {
      it('should call deleteCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1NamespacedServiceAccount
        //instance.deleteCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1Node', function() {
      it('should call deleteCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1Node
        //instance.deleteCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1PersistentVolume', function() {
      it('should call deleteCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1PersistentVolume
        //instance.deleteCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCoreV1SecurityContextConstraints', function() {
      it('should call deleteCoreV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test deleteCoreV1SecurityContextConstraints
        //instance.deleteCoreV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCoreV1APIResources', function() {
      it('should call getCoreV1APIResources successfully', function(done) {
        //uncomment below and update the code to test getCoreV1APIResources
        //instance.getCoreV1APIResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ComponentStatus', function() {
      it('should call listCoreV1ComponentStatus successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ComponentStatus
        //instance.listCoreV1ComponentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ConfigMapForAllNamespaces', function() {
      it('should call listCoreV1ConfigMapForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ConfigMapForAllNamespaces
        //instance.listCoreV1ConfigMapForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1EndpointsForAllNamespaces', function() {
      it('should call listCoreV1EndpointsForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1EndpointsForAllNamespaces
        //instance.listCoreV1EndpointsForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1EventForAllNamespaces', function() {
      it('should call listCoreV1EventForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1EventForAllNamespaces
        //instance.listCoreV1EventForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1LimitRangeForAllNamespaces', function() {
      it('should call listCoreV1LimitRangeForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1LimitRangeForAllNamespaces
        //instance.listCoreV1LimitRangeForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1Namespace', function() {
      it('should call listCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test listCoreV1Namespace
        //instance.listCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedConfigMap', function() {
      it('should call listCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedConfigMap
        //instance.listCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedEndpoints', function() {
      it('should call listCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedEndpoints
        //instance.listCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedEvent', function() {
      it('should call listCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedEvent
        //instance.listCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedLimitRange', function() {
      it('should call listCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedLimitRange
        //instance.listCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call listCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedPersistentVolumeClaim
        //instance.listCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedPod', function() {
      it('should call listCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedPod
        //instance.listCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedPodTemplate', function() {
      it('should call listCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedPodTemplate
        //instance.listCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedReplicationController', function() {
      it('should call listCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedReplicationController
        //instance.listCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedResourceQuota', function() {
      it('should call listCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedResourceQuota
        //instance.listCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedSecret', function() {
      it('should call listCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedSecret
        //instance.listCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedService', function() {
      it('should call listCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedService
        //instance.listCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1NamespacedServiceAccount', function() {
      it('should call listCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test listCoreV1NamespacedServiceAccount
        //instance.listCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1Node', function() {
      it('should call listCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test listCoreV1Node
        //instance.listCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1PersistentVolume', function() {
      it('should call listCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test listCoreV1PersistentVolume
        //instance.listCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1PersistentVolumeClaimForAllNamespaces', function() {
      it('should call listCoreV1PersistentVolumeClaimForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1PersistentVolumeClaimForAllNamespaces
        //instance.listCoreV1PersistentVolumeClaimForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1PodForAllNamespaces', function() {
      it('should call listCoreV1PodForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1PodForAllNamespaces
        //instance.listCoreV1PodForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1PodTemplateForAllNamespaces', function() {
      it('should call listCoreV1PodTemplateForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1PodTemplateForAllNamespaces
        //instance.listCoreV1PodTemplateForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ReplicationControllerForAllNamespaces', function() {
      it('should call listCoreV1ReplicationControllerForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ReplicationControllerForAllNamespaces
        //instance.listCoreV1ReplicationControllerForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ResourceQuotaForAllNamespaces', function() {
      it('should call listCoreV1ResourceQuotaForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ResourceQuotaForAllNamespaces
        //instance.listCoreV1ResourceQuotaForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1SecretForAllNamespaces', function() {
      it('should call listCoreV1SecretForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1SecretForAllNamespaces
        //instance.listCoreV1SecretForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1SecurityContextConstraints', function() {
      it('should call listCoreV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test listCoreV1SecurityContextConstraints
        //instance.listCoreV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ServiceAccountForAllNamespaces', function() {
      it('should call listCoreV1ServiceAccountForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ServiceAccountForAllNamespaces
        //instance.listCoreV1ServiceAccountForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCoreV1ServiceForAllNamespaces', function() {
      it('should call listCoreV1ServiceForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listCoreV1ServiceForAllNamespaces
        //instance.listCoreV1ServiceForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1Namespace', function() {
      it('should call patchCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1Namespace
        //instance.patchCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespaceStatus', function() {
      it('should call patchCoreV1NamespaceStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespaceStatus
        //instance.patchCoreV1NamespaceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedConfigMap', function() {
      it('should call patchCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedConfigMap
        //instance.patchCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedEndpoints', function() {
      it('should call patchCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedEndpoints
        //instance.patchCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedEvent', function() {
      it('should call patchCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedEvent
        //instance.patchCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedLimitRange', function() {
      it('should call patchCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedLimitRange
        //instance.patchCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call patchCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedPersistentVolumeClaim
        //instance.patchCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedPersistentVolumeClaimStatus', function() {
      it('should call patchCoreV1NamespacedPersistentVolumeClaimStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedPersistentVolumeClaimStatus
        //instance.patchCoreV1NamespacedPersistentVolumeClaimStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedPod', function() {
      it('should call patchCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedPod
        //instance.patchCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedPodStatus', function() {
      it('should call patchCoreV1NamespacedPodStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedPodStatus
        //instance.patchCoreV1NamespacedPodStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedPodTemplate', function() {
      it('should call patchCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedPodTemplate
        //instance.patchCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedReplicationController', function() {
      it('should call patchCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedReplicationController
        //instance.patchCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedReplicationControllerStatus', function() {
      it('should call patchCoreV1NamespacedReplicationControllerStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedReplicationControllerStatus
        //instance.patchCoreV1NamespacedReplicationControllerStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedResourceQuota', function() {
      it('should call patchCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedResourceQuota
        //instance.patchCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedResourceQuotaStatus', function() {
      it('should call patchCoreV1NamespacedResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedResourceQuotaStatus
        //instance.patchCoreV1NamespacedResourceQuotaStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedScaleScale', function() {
      it('should call patchCoreV1NamespacedScaleScale successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedScaleScale
        //instance.patchCoreV1NamespacedScaleScale(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedSecret', function() {
      it('should call patchCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedSecret
        //instance.patchCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedService', function() {
      it('should call patchCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedService
        //instance.patchCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedServiceAccount', function() {
      it('should call patchCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedServiceAccount
        //instance.patchCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NamespacedServiceStatus', function() {
      it('should call patchCoreV1NamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NamespacedServiceStatus
        //instance.patchCoreV1NamespacedServiceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1Node', function() {
      it('should call patchCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1Node
        //instance.patchCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1NodeStatus', function() {
      it('should call patchCoreV1NodeStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1NodeStatus
        //instance.patchCoreV1NodeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1PersistentVolume', function() {
      it('should call patchCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1PersistentVolume
        //instance.patchCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1PersistentVolumeStatus', function() {
      it('should call patchCoreV1PersistentVolumeStatus successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1PersistentVolumeStatus
        //instance.patchCoreV1PersistentVolumeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchCoreV1SecurityContextConstraints', function() {
      it('should call patchCoreV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test patchCoreV1SecurityContextConstraints
        //instance.patchCoreV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1DELETENamespacedPod', function() {
      it('should call proxyCoreV1DELETENamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1DELETENamespacedPod
        //instance.proxyCoreV1DELETENamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1DELETENamespacedPodWithPath', function() {
      it('should call proxyCoreV1DELETENamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1DELETENamespacedPodWithPath
        //instance.proxyCoreV1DELETENamespacedPodWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1DELETENamespacedService', function() {
      it('should call proxyCoreV1DELETENamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1DELETENamespacedService
        //instance.proxyCoreV1DELETENamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1DELETENamespacedServiceWithPath', function() {
      it('should call proxyCoreV1DELETENamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1DELETENamespacedServiceWithPath
        //instance.proxyCoreV1DELETENamespacedServiceWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1DELETENode', function() {
      it('should call proxyCoreV1DELETENode successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1DELETENode
        //instance.proxyCoreV1DELETENode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1DELETENodeWithPath', function() {
      it('should call proxyCoreV1DELETENodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1DELETENodeWithPath
        //instance.proxyCoreV1DELETENodeWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1GETNamespacedPod', function() {
      it('should call proxyCoreV1GETNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1GETNamespacedPod
        //instance.proxyCoreV1GETNamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1GETNamespacedPodWithPath', function() {
      it('should call proxyCoreV1GETNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1GETNamespacedPodWithPath
        //instance.proxyCoreV1GETNamespacedPodWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1GETNamespacedService', function() {
      it('should call proxyCoreV1GETNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1GETNamespacedService
        //instance.proxyCoreV1GETNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1GETNamespacedServiceWithPath', function() {
      it('should call proxyCoreV1GETNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1GETNamespacedServiceWithPath
        //instance.proxyCoreV1GETNamespacedServiceWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1GETNode', function() {
      it('should call proxyCoreV1GETNode successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1GETNode
        //instance.proxyCoreV1GETNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1GETNodeWithPath', function() {
      it('should call proxyCoreV1GETNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1GETNodeWithPath
        //instance.proxyCoreV1GETNodeWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1HEADNamespacedPod', function() {
      it('should call proxyCoreV1HEADNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1HEADNamespacedPod
        //instance.proxyCoreV1HEADNamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1HEADNamespacedPodWithPath', function() {
      it('should call proxyCoreV1HEADNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1HEADNamespacedPodWithPath
        //instance.proxyCoreV1HEADNamespacedPodWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1HEADNamespacedService', function() {
      it('should call proxyCoreV1HEADNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1HEADNamespacedService
        //instance.proxyCoreV1HEADNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1HEADNamespacedServiceWithPath', function() {
      it('should call proxyCoreV1HEADNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1HEADNamespacedServiceWithPath
        //instance.proxyCoreV1HEADNamespacedServiceWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1HEADNode', function() {
      it('should call proxyCoreV1HEADNode successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1HEADNode
        //instance.proxyCoreV1HEADNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1HEADNodeWithPath', function() {
      it('should call proxyCoreV1HEADNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1HEADNodeWithPath
        //instance.proxyCoreV1HEADNodeWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1OPTIONSNamespacedPod', function() {
      it('should call proxyCoreV1OPTIONSNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1OPTIONSNamespacedPod
        //instance.proxyCoreV1OPTIONSNamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1OPTIONSNamespacedPodWithPath', function() {
      it('should call proxyCoreV1OPTIONSNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1OPTIONSNamespacedPodWithPath
        //instance.proxyCoreV1OPTIONSNamespacedPodWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1OPTIONSNamespacedService', function() {
      it('should call proxyCoreV1OPTIONSNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1OPTIONSNamespacedService
        //instance.proxyCoreV1OPTIONSNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1OPTIONSNamespacedServiceWithPath', function() {
      it('should call proxyCoreV1OPTIONSNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1OPTIONSNamespacedServiceWithPath
        //instance.proxyCoreV1OPTIONSNamespacedServiceWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1OPTIONSNode', function() {
      it('should call proxyCoreV1OPTIONSNode successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1OPTIONSNode
        //instance.proxyCoreV1OPTIONSNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1OPTIONSNodeWithPath', function() {
      it('should call proxyCoreV1OPTIONSNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1OPTIONSNodeWithPath
        //instance.proxyCoreV1OPTIONSNodeWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PATCHNamespacedPod', function() {
      it('should call proxyCoreV1PATCHNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PATCHNamespacedPod
        //instance.proxyCoreV1PATCHNamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PATCHNamespacedPodWithPath', function() {
      it('should call proxyCoreV1PATCHNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PATCHNamespacedPodWithPath
        //instance.proxyCoreV1PATCHNamespacedPodWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PATCHNamespacedService', function() {
      it('should call proxyCoreV1PATCHNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PATCHNamespacedService
        //instance.proxyCoreV1PATCHNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PATCHNamespacedServiceWithPath', function() {
      it('should call proxyCoreV1PATCHNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PATCHNamespacedServiceWithPath
        //instance.proxyCoreV1PATCHNamespacedServiceWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PATCHNode', function() {
      it('should call proxyCoreV1PATCHNode successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PATCHNode
        //instance.proxyCoreV1PATCHNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PATCHNodeWithPath', function() {
      it('should call proxyCoreV1PATCHNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PATCHNodeWithPath
        //instance.proxyCoreV1PATCHNodeWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1POSTNamespacedPod', function() {
      it('should call proxyCoreV1POSTNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1POSTNamespacedPod
        //instance.proxyCoreV1POSTNamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1POSTNamespacedPodWithPath', function() {
      it('should call proxyCoreV1POSTNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1POSTNamespacedPodWithPath
        //instance.proxyCoreV1POSTNamespacedPodWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1POSTNamespacedService', function() {
      it('should call proxyCoreV1POSTNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1POSTNamespacedService
        //instance.proxyCoreV1POSTNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1POSTNamespacedServiceWithPath', function() {
      it('should call proxyCoreV1POSTNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1POSTNamespacedServiceWithPath
        //instance.proxyCoreV1POSTNamespacedServiceWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1POSTNode', function() {
      it('should call proxyCoreV1POSTNode successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1POSTNode
        //instance.proxyCoreV1POSTNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1POSTNodeWithPath', function() {
      it('should call proxyCoreV1POSTNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1POSTNodeWithPath
        //instance.proxyCoreV1POSTNodeWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PUTNamespacedPod', function() {
      it('should call proxyCoreV1PUTNamespacedPod successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PUTNamespacedPod
        //instance.proxyCoreV1PUTNamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PUTNamespacedPodWithPath', function() {
      it('should call proxyCoreV1PUTNamespacedPodWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PUTNamespacedPodWithPath
        //instance.proxyCoreV1PUTNamespacedPodWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PUTNamespacedService', function() {
      it('should call proxyCoreV1PUTNamespacedService successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PUTNamespacedService
        //instance.proxyCoreV1PUTNamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PUTNamespacedServiceWithPath', function() {
      it('should call proxyCoreV1PUTNamespacedServiceWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PUTNamespacedServiceWithPath
        //instance.proxyCoreV1PUTNamespacedServiceWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PUTNode', function() {
      it('should call proxyCoreV1PUTNode successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PUTNode
        //instance.proxyCoreV1PUTNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('proxyCoreV1PUTNodeWithPath', function() {
      it('should call proxyCoreV1PUTNodeWithPath successfully', function(done) {
        //uncomment below and update the code to test proxyCoreV1PUTNodeWithPath
        //instance.proxyCoreV1PUTNodeWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1ComponentStatus', function() {
      it('should call readCoreV1ComponentStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1ComponentStatus
        //instance.readCoreV1ComponentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1Namespace', function() {
      it('should call readCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test readCoreV1Namespace
        //instance.readCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespaceStatus', function() {
      it('should call readCoreV1NamespaceStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespaceStatus
        //instance.readCoreV1NamespaceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedConfigMap', function() {
      it('should call readCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedConfigMap
        //instance.readCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedEndpoints', function() {
      it('should call readCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedEndpoints
        //instance.readCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedEvent', function() {
      it('should call readCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedEvent
        //instance.readCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedLimitRange', function() {
      it('should call readCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedLimitRange
        //instance.readCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call readCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPersistentVolumeClaim
        //instance.readCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPersistentVolumeClaimStatus', function() {
      it('should call readCoreV1NamespacedPersistentVolumeClaimStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPersistentVolumeClaimStatus
        //instance.readCoreV1NamespacedPersistentVolumeClaimStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPod', function() {
      it('should call readCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPod
        //instance.readCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPodLog', function() {
      it('should call readCoreV1NamespacedPodLog successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPodLog
        //instance.readCoreV1NamespacedPodLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPodStatus', function() {
      it('should call readCoreV1NamespacedPodStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPodStatus
        //instance.readCoreV1NamespacedPodStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedPodTemplate', function() {
      it('should call readCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedPodTemplate
        //instance.readCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedReplicationController', function() {
      it('should call readCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedReplicationController
        //instance.readCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedReplicationControllerStatus', function() {
      it('should call readCoreV1NamespacedReplicationControllerStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedReplicationControllerStatus
        //instance.readCoreV1NamespacedReplicationControllerStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedResourceQuota', function() {
      it('should call readCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedResourceQuota
        //instance.readCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedResourceQuotaStatus', function() {
      it('should call readCoreV1NamespacedResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedResourceQuotaStatus
        //instance.readCoreV1NamespacedResourceQuotaStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedScaleScale', function() {
      it('should call readCoreV1NamespacedScaleScale successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedScaleScale
        //instance.readCoreV1NamespacedScaleScale(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedSecret', function() {
      it('should call readCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedSecret
        //instance.readCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedService', function() {
      it('should call readCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedService
        //instance.readCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedServiceAccount', function() {
      it('should call readCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedServiceAccount
        //instance.readCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NamespacedServiceStatus', function() {
      it('should call readCoreV1NamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NamespacedServiceStatus
        //instance.readCoreV1NamespacedServiceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1Node', function() {
      it('should call readCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test readCoreV1Node
        //instance.readCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1NodeStatus', function() {
      it('should call readCoreV1NodeStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1NodeStatus
        //instance.readCoreV1NodeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1PersistentVolume', function() {
      it('should call readCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test readCoreV1PersistentVolume
        //instance.readCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1PersistentVolumeStatus', function() {
      it('should call readCoreV1PersistentVolumeStatus successfully', function(done) {
        //uncomment below and update the code to test readCoreV1PersistentVolumeStatus
        //instance.readCoreV1PersistentVolumeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readCoreV1SecurityContextConstraints', function() {
      it('should call readCoreV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test readCoreV1SecurityContextConstraints
        //instance.readCoreV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1Namespace', function() {
      it('should call replaceCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1Namespace
        //instance.replaceCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespaceFinalize', function() {
      it('should call replaceCoreV1NamespaceFinalize successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespaceFinalize
        //instance.replaceCoreV1NamespaceFinalize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespaceStatus', function() {
      it('should call replaceCoreV1NamespaceStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespaceStatus
        //instance.replaceCoreV1NamespaceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedConfigMap', function() {
      it('should call replaceCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedConfigMap
        //instance.replaceCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedEndpoints', function() {
      it('should call replaceCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedEndpoints
        //instance.replaceCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedEvent', function() {
      it('should call replaceCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedEvent
        //instance.replaceCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedLimitRange', function() {
      it('should call replaceCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedLimitRange
        //instance.replaceCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call replaceCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedPersistentVolumeClaim
        //instance.replaceCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedPersistentVolumeClaimStatus', function() {
      it('should call replaceCoreV1NamespacedPersistentVolumeClaimStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedPersistentVolumeClaimStatus
        //instance.replaceCoreV1NamespacedPersistentVolumeClaimStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedPod', function() {
      it('should call replaceCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedPod
        //instance.replaceCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedPodStatus', function() {
      it('should call replaceCoreV1NamespacedPodStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedPodStatus
        //instance.replaceCoreV1NamespacedPodStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedPodTemplate', function() {
      it('should call replaceCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedPodTemplate
        //instance.replaceCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedReplicationController', function() {
      it('should call replaceCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedReplicationController
        //instance.replaceCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedReplicationControllerStatus', function() {
      it('should call replaceCoreV1NamespacedReplicationControllerStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedReplicationControllerStatus
        //instance.replaceCoreV1NamespacedReplicationControllerStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedResourceQuota', function() {
      it('should call replaceCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedResourceQuota
        //instance.replaceCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedResourceQuotaStatus', function() {
      it('should call replaceCoreV1NamespacedResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedResourceQuotaStatus
        //instance.replaceCoreV1NamespacedResourceQuotaStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedScaleScale', function() {
      it('should call replaceCoreV1NamespacedScaleScale successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedScaleScale
        //instance.replaceCoreV1NamespacedScaleScale(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedSecret', function() {
      it('should call replaceCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedSecret
        //instance.replaceCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedService', function() {
      it('should call replaceCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedService
        //instance.replaceCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedServiceAccount', function() {
      it('should call replaceCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedServiceAccount
        //instance.replaceCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NamespacedServiceStatus', function() {
      it('should call replaceCoreV1NamespacedServiceStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NamespacedServiceStatus
        //instance.replaceCoreV1NamespacedServiceStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1Node', function() {
      it('should call replaceCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1Node
        //instance.replaceCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1NodeStatus', function() {
      it('should call replaceCoreV1NodeStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1NodeStatus
        //instance.replaceCoreV1NodeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1PersistentVolume', function() {
      it('should call replaceCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1PersistentVolume
        //instance.replaceCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1PersistentVolumeStatus', function() {
      it('should call replaceCoreV1PersistentVolumeStatus successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1PersistentVolumeStatus
        //instance.replaceCoreV1PersistentVolumeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceCoreV1SecurityContextConstraints', function() {
      it('should call replaceCoreV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test replaceCoreV1SecurityContextConstraints
        //instance.replaceCoreV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1ConfigMapListForAllNamespaces', function() {
      it('should call watchCoreV1ConfigMapListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1ConfigMapListForAllNamespaces
        //instance.watchCoreV1ConfigMapListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1EndpointsListForAllNamespaces', function() {
      it('should call watchCoreV1EndpointsListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1EndpointsListForAllNamespaces
        //instance.watchCoreV1EndpointsListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1EventListForAllNamespaces', function() {
      it('should call watchCoreV1EventListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1EventListForAllNamespaces
        //instance.watchCoreV1EventListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1LimitRangeListForAllNamespaces', function() {
      it('should call watchCoreV1LimitRangeListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1LimitRangeListForAllNamespaces
        //instance.watchCoreV1LimitRangeListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1Namespace', function() {
      it('should call watchCoreV1Namespace successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1Namespace
        //instance.watchCoreV1Namespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespaceList', function() {
      it('should call watchCoreV1NamespaceList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespaceList
        //instance.watchCoreV1NamespaceList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedConfigMap', function() {
      it('should call watchCoreV1NamespacedConfigMap successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedConfigMap
        //instance.watchCoreV1NamespacedConfigMap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedConfigMapList', function() {
      it('should call watchCoreV1NamespacedConfigMapList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedConfigMapList
        //instance.watchCoreV1NamespacedConfigMapList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedEndpoints', function() {
      it('should call watchCoreV1NamespacedEndpoints successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedEndpoints
        //instance.watchCoreV1NamespacedEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedEndpointsList', function() {
      it('should call watchCoreV1NamespacedEndpointsList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedEndpointsList
        //instance.watchCoreV1NamespacedEndpointsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedEvent', function() {
      it('should call watchCoreV1NamespacedEvent successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedEvent
        //instance.watchCoreV1NamespacedEvent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedEventList', function() {
      it('should call watchCoreV1NamespacedEventList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedEventList
        //instance.watchCoreV1NamespacedEventList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedLimitRange', function() {
      it('should call watchCoreV1NamespacedLimitRange successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedLimitRange
        //instance.watchCoreV1NamespacedLimitRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedLimitRangeList', function() {
      it('should call watchCoreV1NamespacedLimitRangeList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedLimitRangeList
        //instance.watchCoreV1NamespacedLimitRangeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPersistentVolumeClaim', function() {
      it('should call watchCoreV1NamespacedPersistentVolumeClaim successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPersistentVolumeClaim
        //instance.watchCoreV1NamespacedPersistentVolumeClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPersistentVolumeClaimList', function() {
      it('should call watchCoreV1NamespacedPersistentVolumeClaimList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPersistentVolumeClaimList
        //instance.watchCoreV1NamespacedPersistentVolumeClaimList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPod', function() {
      it('should call watchCoreV1NamespacedPod successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPod
        //instance.watchCoreV1NamespacedPod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPodList', function() {
      it('should call watchCoreV1NamespacedPodList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPodList
        //instance.watchCoreV1NamespacedPodList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPodTemplate', function() {
      it('should call watchCoreV1NamespacedPodTemplate successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPodTemplate
        //instance.watchCoreV1NamespacedPodTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedPodTemplateList', function() {
      it('should call watchCoreV1NamespacedPodTemplateList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedPodTemplateList
        //instance.watchCoreV1NamespacedPodTemplateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedReplicationController', function() {
      it('should call watchCoreV1NamespacedReplicationController successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedReplicationController
        //instance.watchCoreV1NamespacedReplicationController(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedReplicationControllerList', function() {
      it('should call watchCoreV1NamespacedReplicationControllerList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedReplicationControllerList
        //instance.watchCoreV1NamespacedReplicationControllerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedResourceQuota', function() {
      it('should call watchCoreV1NamespacedResourceQuota successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedResourceQuota
        //instance.watchCoreV1NamespacedResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedResourceQuotaList', function() {
      it('should call watchCoreV1NamespacedResourceQuotaList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedResourceQuotaList
        //instance.watchCoreV1NamespacedResourceQuotaList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedSecret', function() {
      it('should call watchCoreV1NamespacedSecret successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedSecret
        //instance.watchCoreV1NamespacedSecret(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedSecretList', function() {
      it('should call watchCoreV1NamespacedSecretList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedSecretList
        //instance.watchCoreV1NamespacedSecretList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedService', function() {
      it('should call watchCoreV1NamespacedService successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedService
        //instance.watchCoreV1NamespacedService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedServiceAccount', function() {
      it('should call watchCoreV1NamespacedServiceAccount successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedServiceAccount
        //instance.watchCoreV1NamespacedServiceAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedServiceAccountList', function() {
      it('should call watchCoreV1NamespacedServiceAccountList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedServiceAccountList
        //instance.watchCoreV1NamespacedServiceAccountList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NamespacedServiceList', function() {
      it('should call watchCoreV1NamespacedServiceList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NamespacedServiceList
        //instance.watchCoreV1NamespacedServiceList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1Node', function() {
      it('should call watchCoreV1Node successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1Node
        //instance.watchCoreV1Node(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1NodeList', function() {
      it('should call watchCoreV1NodeList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1NodeList
        //instance.watchCoreV1NodeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1PersistentVolume', function() {
      it('should call watchCoreV1PersistentVolume successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1PersistentVolume
        //instance.watchCoreV1PersistentVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1PersistentVolumeClaimListForAllNamespaces', function() {
      it('should call watchCoreV1PersistentVolumeClaimListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1PersistentVolumeClaimListForAllNamespaces
        //instance.watchCoreV1PersistentVolumeClaimListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1PersistentVolumeList', function() {
      it('should call watchCoreV1PersistentVolumeList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1PersistentVolumeList
        //instance.watchCoreV1PersistentVolumeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1PodListForAllNamespaces', function() {
      it('should call watchCoreV1PodListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1PodListForAllNamespaces
        //instance.watchCoreV1PodListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1PodTemplateListForAllNamespaces', function() {
      it('should call watchCoreV1PodTemplateListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1PodTemplateListForAllNamespaces
        //instance.watchCoreV1PodTemplateListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1ReplicationControllerListForAllNamespaces', function() {
      it('should call watchCoreV1ReplicationControllerListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1ReplicationControllerListForAllNamespaces
        //instance.watchCoreV1ReplicationControllerListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1ResourceQuotaListForAllNamespaces', function() {
      it('should call watchCoreV1ResourceQuotaListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1ResourceQuotaListForAllNamespaces
        //instance.watchCoreV1ResourceQuotaListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1SecretListForAllNamespaces', function() {
      it('should call watchCoreV1SecretListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1SecretListForAllNamespaces
        //instance.watchCoreV1SecretListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1SecurityContextConstraints', function() {
      it('should call watchCoreV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1SecurityContextConstraints
        //instance.watchCoreV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1SecurityContextConstraintsList', function() {
      it('should call watchCoreV1SecurityContextConstraintsList successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1SecurityContextConstraintsList
        //instance.watchCoreV1SecurityContextConstraintsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1ServiceAccountListForAllNamespaces', function() {
      it('should call watchCoreV1ServiceAccountListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1ServiceAccountListForAllNamespaces
        //instance.watchCoreV1ServiceAccountListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchCoreV1ServiceListForAllNamespaces', function() {
      it('should call watchCoreV1ServiceListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchCoreV1ServiceListForAllNamespaces
        //instance.watchCoreV1ServiceListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
