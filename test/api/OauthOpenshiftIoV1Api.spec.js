/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: v3.6.173.0.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenShiftApiWithKubernetes);
  }
}(this, function(expect, OpenShiftApiWithKubernetes) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenShiftApiWithKubernetes.OauthOpenshiftIoV1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OauthOpenshiftIoV1Api', function() {
    describe('createOauthOpenshiftIoV1OAuthAccessToken', function() {
      it('should call createOauthOpenshiftIoV1OAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test createOauthOpenshiftIoV1OAuthAccessToken
        //instance.createOauthOpenshiftIoV1OAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOauthOpenshiftIoV1OAuthAuthorizeToken', function() {
      it('should call createOauthOpenshiftIoV1OAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test createOauthOpenshiftIoV1OAuthAuthorizeToken
        //instance.createOauthOpenshiftIoV1OAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOauthOpenshiftIoV1OAuthClient', function() {
      it('should call createOauthOpenshiftIoV1OAuthClient successfully', function(done) {
        //uncomment below and update the code to test createOauthOpenshiftIoV1OAuthClient
        //instance.createOauthOpenshiftIoV1OAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOauthOpenshiftIoV1OAuthClientAuthorization', function() {
      it('should call createOauthOpenshiftIoV1OAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test createOauthOpenshiftIoV1OAuthClientAuthorization
        //instance.createOauthOpenshiftIoV1OAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOauthOpenshiftIoV1CollectionOAuthAccessToken', function() {
      it('should call deleteOauthOpenshiftIoV1CollectionOAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test deleteOauthOpenshiftIoV1CollectionOAuthAccessToken
        //instance.deleteOauthOpenshiftIoV1CollectionOAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeToken', function() {
      it('should call deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeToken
        //instance.deleteOauthOpenshiftIoV1CollectionOAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOauthOpenshiftIoV1CollectionOAuthClient', function() {
      it('should call deleteOauthOpenshiftIoV1CollectionOAuthClient successfully', function(done) {
        //uncomment below and update the code to test deleteOauthOpenshiftIoV1CollectionOAuthClient
        //instance.deleteOauthOpenshiftIoV1CollectionOAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorization', function() {
      it('should call deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorization
        //instance.deleteOauthOpenshiftIoV1CollectionOAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOauthOpenshiftIoV1OAuthAccessToken', function() {
      it('should call deleteOauthOpenshiftIoV1OAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test deleteOauthOpenshiftIoV1OAuthAccessToken
        //instance.deleteOauthOpenshiftIoV1OAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOauthOpenshiftIoV1OAuthAuthorizeToken', function() {
      it('should call deleteOauthOpenshiftIoV1OAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test deleteOauthOpenshiftIoV1OAuthAuthorizeToken
        //instance.deleteOauthOpenshiftIoV1OAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOauthOpenshiftIoV1OAuthClient', function() {
      it('should call deleteOauthOpenshiftIoV1OAuthClient successfully', function(done) {
        //uncomment below and update the code to test deleteOauthOpenshiftIoV1OAuthClient
        //instance.deleteOauthOpenshiftIoV1OAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOauthOpenshiftIoV1OAuthClientAuthorization', function() {
      it('should call deleteOauthOpenshiftIoV1OAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test deleteOauthOpenshiftIoV1OAuthClientAuthorization
        //instance.deleteOauthOpenshiftIoV1OAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOauthOpenshiftIoV1APIResources', function() {
      it('should call getOauthOpenshiftIoV1APIResources successfully', function(done) {
        //uncomment below and update the code to test getOauthOpenshiftIoV1APIResources
        //instance.getOauthOpenshiftIoV1APIResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOauthOpenshiftIoV1OAuthAccessToken', function() {
      it('should call listOauthOpenshiftIoV1OAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test listOauthOpenshiftIoV1OAuthAccessToken
        //instance.listOauthOpenshiftIoV1OAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOauthOpenshiftIoV1OAuthAuthorizeToken', function() {
      it('should call listOauthOpenshiftIoV1OAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test listOauthOpenshiftIoV1OAuthAuthorizeToken
        //instance.listOauthOpenshiftIoV1OAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOauthOpenshiftIoV1OAuthClient', function() {
      it('should call listOauthOpenshiftIoV1OAuthClient successfully', function(done) {
        //uncomment below and update the code to test listOauthOpenshiftIoV1OAuthClient
        //instance.listOauthOpenshiftIoV1OAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOauthOpenshiftIoV1OAuthClientAuthorization', function() {
      it('should call listOauthOpenshiftIoV1OAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test listOauthOpenshiftIoV1OAuthClientAuthorization
        //instance.listOauthOpenshiftIoV1OAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchOauthOpenshiftIoV1OAuthAccessToken', function() {
      it('should call patchOauthOpenshiftIoV1OAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test patchOauthOpenshiftIoV1OAuthAccessToken
        //instance.patchOauthOpenshiftIoV1OAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchOauthOpenshiftIoV1OAuthAuthorizeToken', function() {
      it('should call patchOauthOpenshiftIoV1OAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test patchOauthOpenshiftIoV1OAuthAuthorizeToken
        //instance.patchOauthOpenshiftIoV1OAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchOauthOpenshiftIoV1OAuthClient', function() {
      it('should call patchOauthOpenshiftIoV1OAuthClient successfully', function(done) {
        //uncomment below and update the code to test patchOauthOpenshiftIoV1OAuthClient
        //instance.patchOauthOpenshiftIoV1OAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchOauthOpenshiftIoV1OAuthClientAuthorization', function() {
      it('should call patchOauthOpenshiftIoV1OAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test patchOauthOpenshiftIoV1OAuthClientAuthorization
        //instance.patchOauthOpenshiftIoV1OAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readOauthOpenshiftIoV1OAuthAccessToken', function() {
      it('should call readOauthOpenshiftIoV1OAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test readOauthOpenshiftIoV1OAuthAccessToken
        //instance.readOauthOpenshiftIoV1OAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readOauthOpenshiftIoV1OAuthAuthorizeToken', function() {
      it('should call readOauthOpenshiftIoV1OAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test readOauthOpenshiftIoV1OAuthAuthorizeToken
        //instance.readOauthOpenshiftIoV1OAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readOauthOpenshiftIoV1OAuthClient', function() {
      it('should call readOauthOpenshiftIoV1OAuthClient successfully', function(done) {
        //uncomment below and update the code to test readOauthOpenshiftIoV1OAuthClient
        //instance.readOauthOpenshiftIoV1OAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readOauthOpenshiftIoV1OAuthClientAuthorization', function() {
      it('should call readOauthOpenshiftIoV1OAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test readOauthOpenshiftIoV1OAuthClientAuthorization
        //instance.readOauthOpenshiftIoV1OAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceOauthOpenshiftIoV1OAuthAccessToken', function() {
      it('should call replaceOauthOpenshiftIoV1OAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test replaceOauthOpenshiftIoV1OAuthAccessToken
        //instance.replaceOauthOpenshiftIoV1OAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceOauthOpenshiftIoV1OAuthAuthorizeToken', function() {
      it('should call replaceOauthOpenshiftIoV1OAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test replaceOauthOpenshiftIoV1OAuthAuthorizeToken
        //instance.replaceOauthOpenshiftIoV1OAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceOauthOpenshiftIoV1OAuthClient', function() {
      it('should call replaceOauthOpenshiftIoV1OAuthClient successfully', function(done) {
        //uncomment below and update the code to test replaceOauthOpenshiftIoV1OAuthClient
        //instance.replaceOauthOpenshiftIoV1OAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceOauthOpenshiftIoV1OAuthClientAuthorization', function() {
      it('should call replaceOauthOpenshiftIoV1OAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test replaceOauthOpenshiftIoV1OAuthClientAuthorization
        //instance.replaceOauthOpenshiftIoV1OAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOauthOpenshiftIoV1OAuthAccessToken', function() {
      it('should call watchOauthOpenshiftIoV1OAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test watchOauthOpenshiftIoV1OAuthAccessToken
        //instance.watchOauthOpenshiftIoV1OAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOauthOpenshiftIoV1OAuthAccessTokenList', function() {
      it('should call watchOauthOpenshiftIoV1OAuthAccessTokenList successfully', function(done) {
        //uncomment below and update the code to test watchOauthOpenshiftIoV1OAuthAccessTokenList
        //instance.watchOauthOpenshiftIoV1OAuthAccessTokenList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOauthOpenshiftIoV1OAuthAuthorizeToken', function() {
      it('should call watchOauthOpenshiftIoV1OAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test watchOauthOpenshiftIoV1OAuthAuthorizeToken
        //instance.watchOauthOpenshiftIoV1OAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOauthOpenshiftIoV1OAuthAuthorizeTokenList', function() {
      it('should call watchOauthOpenshiftIoV1OAuthAuthorizeTokenList successfully', function(done) {
        //uncomment below and update the code to test watchOauthOpenshiftIoV1OAuthAuthorizeTokenList
        //instance.watchOauthOpenshiftIoV1OAuthAuthorizeTokenList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOauthOpenshiftIoV1OAuthClient', function() {
      it('should call watchOauthOpenshiftIoV1OAuthClient successfully', function(done) {
        //uncomment below and update the code to test watchOauthOpenshiftIoV1OAuthClient
        //instance.watchOauthOpenshiftIoV1OAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOauthOpenshiftIoV1OAuthClientAuthorization', function() {
      it('should call watchOauthOpenshiftIoV1OAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test watchOauthOpenshiftIoV1OAuthClientAuthorization
        //instance.watchOauthOpenshiftIoV1OAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOauthOpenshiftIoV1OAuthClientAuthorizationList', function() {
      it('should call watchOauthOpenshiftIoV1OAuthClientAuthorizationList successfully', function(done) {
        //uncomment below and update the code to test watchOauthOpenshiftIoV1OAuthClientAuthorizationList
        //instance.watchOauthOpenshiftIoV1OAuthClientAuthorizationList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOauthOpenshiftIoV1OAuthClientList', function() {
      it('should call watchOauthOpenshiftIoV1OAuthClientList successfully', function(done) {
        //uncomment below and update the code to test watchOauthOpenshiftIoV1OAuthClientList
        //instance.watchOauthOpenshiftIoV1OAuthClientList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
