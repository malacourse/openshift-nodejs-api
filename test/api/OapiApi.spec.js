/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: v3.6.173.0.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenShiftApiWithKubernetes);
  }
}(this, function(expect, OpenShiftApiWithKubernetes) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenShiftApiWithKubernetes.OapiApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OapiApi', function() {
    describe('connectPostNamespacedBinaryBuildRequestOptionsInstantiatebinary', function() {
      it('should call connectPostNamespacedBinaryBuildRequestOptionsInstantiatebinary successfully', function(done) {
        //uncomment below and update the code to test connectPostNamespacedBinaryBuildRequestOptionsInstantiatebinary
        //instance.connectPostNamespacedBinaryBuildRequestOptionsInstantiatebinary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPostNamespacedBuildWebhooks', function() {
      it('should call connectPostNamespacedBuildWebhooks successfully', function(done) {
        //uncomment below and update the code to test connectPostNamespacedBuildWebhooks
        //instance.connectPostNamespacedBuildWebhooks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('connectPostNamespacedBuildWebhooksWithPath', function() {
      it('should call connectPostNamespacedBuildWebhooksWithPath successfully', function(done) {
        //uncomment below and update the code to test connectPostNamespacedBuildWebhooksWithPath
        //instance.connectPostNamespacedBuildWebhooksWithPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBuildConfigForAllNamespaces', function() {
      it('should call createBuildConfigForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createBuildConfigForAllNamespaces
        //instance.createBuildConfigForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBuildForAllNamespaces', function() {
      it('should call createBuildForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createBuildForAllNamespaces
        //instance.createBuildForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createClusterNetwork', function() {
      it('should call createClusterNetwork successfully', function(done) {
        //uncomment below and update the code to test createClusterNetwork
        //instance.createClusterNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createClusterPolicy', function() {
      it('should call createClusterPolicy successfully', function(done) {
        //uncomment below and update the code to test createClusterPolicy
        //instance.createClusterPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createClusterPolicyBinding', function() {
      it('should call createClusterPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test createClusterPolicyBinding
        //instance.createClusterPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createClusterResourceQuota', function() {
      it('should call createClusterResourceQuota successfully', function(done) {
        //uncomment below and update the code to test createClusterResourceQuota
        //instance.createClusterResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createClusterRole', function() {
      it('should call createClusterRole successfully', function(done) {
        //uncomment below and update the code to test createClusterRole
        //instance.createClusterRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createClusterRoleBinding', function() {
      it('should call createClusterRoleBinding successfully', function(done) {
        //uncomment below and update the code to test createClusterRoleBinding
        //instance.createClusterRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDeploymentConfigForAllNamespaces', function() {
      it('should call createDeploymentConfigForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createDeploymentConfigForAllNamespaces
        //instance.createDeploymentConfigForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDeploymentConfigRollbackForAllNamespaces', function() {
      it('should call createDeploymentConfigRollbackForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createDeploymentConfigRollbackForAllNamespaces
        //instance.createDeploymentConfigRollbackForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEgressNetworkPolicyForAllNamespaces', function() {
      it('should call createEgressNetworkPolicyForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createEgressNetworkPolicyForAllNamespaces
        //instance.createEgressNetworkPolicyForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGroup', function() {
      it('should call createGroup successfully', function(done) {
        //uncomment below and update the code to test createGroup
        //instance.createGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createHostSubnet', function() {
      it('should call createHostSubnet successfully', function(done) {
        //uncomment below and update the code to test createHostSubnet
        //instance.createHostSubnet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIdentity', function() {
      it('should call createIdentity successfully', function(done) {
        //uncomment below and update the code to test createIdentity
        //instance.createIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImage', function() {
      it('should call createImage successfully', function(done) {
        //uncomment below and update the code to test createImage
        //instance.createImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageSignature', function() {
      it('should call createImageSignature successfully', function(done) {
        //uncomment below and update the code to test createImageSignature
        //instance.createImageSignature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageStreamForAllNamespaces', function() {
      it('should call createImageStreamForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createImageStreamForAllNamespaces
        //instance.createImageStreamForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageStreamImportForAllNamespaces', function() {
      it('should call createImageStreamImportForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createImageStreamImportForAllNamespaces
        //instance.createImageStreamImportForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageStreamMappingForAllNamespaces', function() {
      it('should call createImageStreamMappingForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createImageStreamMappingForAllNamespaces
        //instance.createImageStreamMappingForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageStreamTagForAllNamespaces', function() {
      it('should call createImageStreamTagForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createImageStreamTagForAllNamespaces
        //instance.createImageStreamTagForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLocalResourceAccessReviewForAllNamespaces', function() {
      it('should call createLocalResourceAccessReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createLocalResourceAccessReviewForAllNamespaces
        //instance.createLocalResourceAccessReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLocalSubjectAccessReviewForAllNamespaces', function() {
      it('should call createLocalSubjectAccessReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createLocalSubjectAccessReviewForAllNamespaces
        //instance.createLocalSubjectAccessReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedBuild', function() {
      it('should call createNamespacedBuild successfully', function(done) {
        //uncomment below and update the code to test createNamespacedBuild
        //instance.createNamespacedBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedBuildConfig', function() {
      it('should call createNamespacedBuildConfig successfully', function(done) {
        //uncomment below and update the code to test createNamespacedBuildConfig
        //instance.createNamespacedBuildConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedBuildRequestClone', function() {
      it('should call createNamespacedBuildRequestClone successfully', function(done) {
        //uncomment below and update the code to test createNamespacedBuildRequestClone
        //instance.createNamespacedBuildRequestClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedBuildRequestInstantiate', function() {
      it('should call createNamespacedBuildRequestInstantiate successfully', function(done) {
        //uncomment below and update the code to test createNamespacedBuildRequestInstantiate
        //instance.createNamespacedBuildRequestInstantiate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedDeploymentConfig', function() {
      it('should call createNamespacedDeploymentConfig successfully', function(done) {
        //uncomment below and update the code to test createNamespacedDeploymentConfig
        //instance.createNamespacedDeploymentConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedDeploymentConfigRollback', function() {
      it('should call createNamespacedDeploymentConfigRollback successfully', function(done) {
        //uncomment below and update the code to test createNamespacedDeploymentConfigRollback
        //instance.createNamespacedDeploymentConfigRollback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedDeploymentConfigRollbackRollback', function() {
      it('should call createNamespacedDeploymentConfigRollbackRollback successfully', function(done) {
        //uncomment below and update the code to test createNamespacedDeploymentConfigRollbackRollback
        //instance.createNamespacedDeploymentConfigRollbackRollback(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedDeploymentRequestInstantiate', function() {
      it('should call createNamespacedDeploymentRequestInstantiate successfully', function(done) {
        //uncomment below and update the code to test createNamespacedDeploymentRequestInstantiate
        //instance.createNamespacedDeploymentRequestInstantiate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedEgressNetworkPolicy', function() {
      it('should call createNamespacedEgressNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test createNamespacedEgressNetworkPolicy
        //instance.createNamespacedEgressNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedImageStream', function() {
      it('should call createNamespacedImageStream successfully', function(done) {
        //uncomment below and update the code to test createNamespacedImageStream
        //instance.createNamespacedImageStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedImageStreamImport', function() {
      it('should call createNamespacedImageStreamImport successfully', function(done) {
        //uncomment below and update the code to test createNamespacedImageStreamImport
        //instance.createNamespacedImageStreamImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedImageStreamMapping', function() {
      it('should call createNamespacedImageStreamMapping successfully', function(done) {
        //uncomment below and update the code to test createNamespacedImageStreamMapping
        //instance.createNamespacedImageStreamMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedImageStreamTag', function() {
      it('should call createNamespacedImageStreamTag successfully', function(done) {
        //uncomment below and update the code to test createNamespacedImageStreamTag
        //instance.createNamespacedImageStreamTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedLocalResourceAccessReview', function() {
      it('should call createNamespacedLocalResourceAccessReview successfully', function(done) {
        //uncomment below and update the code to test createNamespacedLocalResourceAccessReview
        //instance.createNamespacedLocalResourceAccessReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedLocalSubjectAccessReview', function() {
      it('should call createNamespacedLocalSubjectAccessReview successfully', function(done) {
        //uncomment below and update the code to test createNamespacedLocalSubjectAccessReview
        //instance.createNamespacedLocalSubjectAccessReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedPodSecurityPolicyReview', function() {
      it('should call createNamespacedPodSecurityPolicyReview successfully', function(done) {
        //uncomment below and update the code to test createNamespacedPodSecurityPolicyReview
        //instance.createNamespacedPodSecurityPolicyReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedPodSecurityPolicySelfSubjectReview', function() {
      it('should call createNamespacedPodSecurityPolicySelfSubjectReview successfully', function(done) {
        //uncomment below and update the code to test createNamespacedPodSecurityPolicySelfSubjectReview
        //instance.createNamespacedPodSecurityPolicySelfSubjectReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedPodSecurityPolicySubjectReview', function() {
      it('should call createNamespacedPodSecurityPolicySubjectReview successfully', function(done) {
        //uncomment below and update the code to test createNamespacedPodSecurityPolicySubjectReview
        //instance.createNamespacedPodSecurityPolicySubjectReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedPolicy', function() {
      it('should call createNamespacedPolicy successfully', function(done) {
        //uncomment below and update the code to test createNamespacedPolicy
        //instance.createNamespacedPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedPolicyBinding', function() {
      it('should call createNamespacedPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test createNamespacedPolicyBinding
        //instance.createNamespacedPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedResourceAccessReview', function() {
      it('should call createNamespacedResourceAccessReview successfully', function(done) {
        //uncomment below and update the code to test createNamespacedResourceAccessReview
        //instance.createNamespacedResourceAccessReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedRole', function() {
      it('should call createNamespacedRole successfully', function(done) {
        //uncomment below and update the code to test createNamespacedRole
        //instance.createNamespacedRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedRoleBinding', function() {
      it('should call createNamespacedRoleBinding successfully', function(done) {
        //uncomment below and update the code to test createNamespacedRoleBinding
        //instance.createNamespacedRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedRoleBindingRestriction', function() {
      it('should call createNamespacedRoleBindingRestriction successfully', function(done) {
        //uncomment below and update the code to test createNamespacedRoleBindingRestriction
        //instance.createNamespacedRoleBindingRestriction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedRoute', function() {
      it('should call createNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test createNamespacedRoute
        //instance.createNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedSelfSubjectRulesReview', function() {
      it('should call createNamespacedSelfSubjectRulesReview successfully', function(done) {
        //uncomment below and update the code to test createNamespacedSelfSubjectRulesReview
        //instance.createNamespacedSelfSubjectRulesReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedSubjectAccessReview', function() {
      it('should call createNamespacedSubjectAccessReview successfully', function(done) {
        //uncomment below and update the code to test createNamespacedSubjectAccessReview
        //instance.createNamespacedSubjectAccessReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedSubjectRulesReview', function() {
      it('should call createNamespacedSubjectRulesReview successfully', function(done) {
        //uncomment below and update the code to test createNamespacedSubjectRulesReview
        //instance.createNamespacedSubjectRulesReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNamespacedTemplate', function() {
      it('should call createNamespacedTemplate successfully', function(done) {
        //uncomment below and update the code to test createNamespacedTemplate
        //instance.createNamespacedTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNetNamespace', function() {
      it('should call createNetNamespace successfully', function(done) {
        //uncomment below and update the code to test createNetNamespace
        //instance.createNetNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOAuthAccessToken', function() {
      it('should call createOAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test createOAuthAccessToken
        //instance.createOAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOAuthAuthorizeToken', function() {
      it('should call createOAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test createOAuthAuthorizeToken
        //instance.createOAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOAuthClient', function() {
      it('should call createOAuthClient successfully', function(done) {
        //uncomment below and update the code to test createOAuthClient
        //instance.createOAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOAuthClientAuthorization', function() {
      it('should call createOAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test createOAuthClientAuthorization
        //instance.createOAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPodSecurityPolicyReviewForAllNamespaces', function() {
      it('should call createPodSecurityPolicyReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createPodSecurityPolicyReviewForAllNamespaces
        //instance.createPodSecurityPolicyReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPodSecurityPolicySelfSubjectReviewForAllNamespaces', function() {
      it('should call createPodSecurityPolicySelfSubjectReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createPodSecurityPolicySelfSubjectReviewForAllNamespaces
        //instance.createPodSecurityPolicySelfSubjectReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPodSecurityPolicySubjectReviewForAllNamespaces', function() {
      it('should call createPodSecurityPolicySubjectReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createPodSecurityPolicySubjectReviewForAllNamespaces
        //instance.createPodSecurityPolicySubjectReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPolicyBindingForAllNamespaces', function() {
      it('should call createPolicyBindingForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createPolicyBindingForAllNamespaces
        //instance.createPolicyBindingForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPolicyForAllNamespaces', function() {
      it('should call createPolicyForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createPolicyForAllNamespaces
        //instance.createPolicyForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProject', function() {
      it('should call createProject successfully', function(done) {
        //uncomment below and update the code to test createProject
        //instance.createProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProjectRequest', function() {
      it('should call createProjectRequest successfully', function(done) {
        //uncomment below and update the code to test createProjectRequest
        //instance.createProjectRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createResourceAccessReviewForAllNamespaces', function() {
      it('should call createResourceAccessReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createResourceAccessReviewForAllNamespaces
        //instance.createResourceAccessReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoleBindingForAllNamespaces', function() {
      it('should call createRoleBindingForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createRoleBindingForAllNamespaces
        //instance.createRoleBindingForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoleBindingRestrictionForAllNamespaces', function() {
      it('should call createRoleBindingRestrictionForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createRoleBindingRestrictionForAllNamespaces
        //instance.createRoleBindingRestrictionForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoleForAllNamespaces', function() {
      it('should call createRoleForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createRoleForAllNamespaces
        //instance.createRoleForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRouteForAllNamespaces', function() {
      it('should call createRouteForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createRouteForAllNamespaces
        //instance.createRouteForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSelfSubjectRulesReviewForAllNamespaces', function() {
      it('should call createSelfSubjectRulesReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createSelfSubjectRulesReviewForAllNamespaces
        //instance.createSelfSubjectRulesReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSubjectAccessReviewForAllNamespaces', function() {
      it('should call createSubjectAccessReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createSubjectAccessReviewForAllNamespaces
        //instance.createSubjectAccessReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSubjectRulesReviewForAllNamespaces', function() {
      it('should call createSubjectRulesReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createSubjectRulesReviewForAllNamespaces
        //instance.createSubjectRulesReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTemplateForAllNamespaces', function() {
      it('should call createTemplateForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createTemplateForAllNamespaces
        //instance.createTemplateForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUser', function() {
      it('should call createUser successfully', function(done) {
        //uncomment below and update the code to test createUser
        //instance.createUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUserIdentityMapping', function() {
      it('should call createUserIdentityMapping successfully', function(done) {
        //uncomment below and update the code to test createUserIdentityMapping
        //instance.createUserIdentityMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteClusterNetwork', function() {
      it('should call deleteClusterNetwork successfully', function(done) {
        //uncomment below and update the code to test deleteClusterNetwork
        //instance.deleteClusterNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteClusterPolicy', function() {
      it('should call deleteClusterPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteClusterPolicy
        //instance.deleteClusterPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteClusterPolicyBinding', function() {
      it('should call deleteClusterPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test deleteClusterPolicyBinding
        //instance.deleteClusterPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteClusterResourceQuota', function() {
      it('should call deleteClusterResourceQuota successfully', function(done) {
        //uncomment below and update the code to test deleteClusterResourceQuota
        //instance.deleteClusterResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteClusterRole', function() {
      it('should call deleteClusterRole successfully', function(done) {
        //uncomment below and update the code to test deleteClusterRole
        //instance.deleteClusterRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteClusterRoleBinding', function() {
      it('should call deleteClusterRoleBinding successfully', function(done) {
        //uncomment below and update the code to test deleteClusterRoleBinding
        //instance.deleteClusterRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionClusterNetwork', function() {
      it('should call deleteCollectionClusterNetwork successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionClusterNetwork
        //instance.deleteCollectionClusterNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionClusterPolicy', function() {
      it('should call deleteCollectionClusterPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionClusterPolicy
        //instance.deleteCollectionClusterPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionClusterPolicyBinding', function() {
      it('should call deleteCollectionClusterPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionClusterPolicyBinding
        //instance.deleteCollectionClusterPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionClusterResourceQuota', function() {
      it('should call deleteCollectionClusterResourceQuota successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionClusterResourceQuota
        //instance.deleteCollectionClusterResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionGroup', function() {
      it('should call deleteCollectionGroup successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionGroup
        //instance.deleteCollectionGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionHostSubnet', function() {
      it('should call deleteCollectionHostSubnet successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionHostSubnet
        //instance.deleteCollectionHostSubnet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionIdentity', function() {
      it('should call deleteCollectionIdentity successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionIdentity
        //instance.deleteCollectionIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionImage', function() {
      it('should call deleteCollectionImage successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionImage
        //instance.deleteCollectionImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedBuild', function() {
      it('should call deleteCollectionNamespacedBuild successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedBuild
        //instance.deleteCollectionNamespacedBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedBuildConfig', function() {
      it('should call deleteCollectionNamespacedBuildConfig successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedBuildConfig
        //instance.deleteCollectionNamespacedBuildConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedDeploymentConfig', function() {
      it('should call deleteCollectionNamespacedDeploymentConfig successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedDeploymentConfig
        //instance.deleteCollectionNamespacedDeploymentConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedEgressNetworkPolicy', function() {
      it('should call deleteCollectionNamespacedEgressNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedEgressNetworkPolicy
        //instance.deleteCollectionNamespacedEgressNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedImageStream', function() {
      it('should call deleteCollectionNamespacedImageStream successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedImageStream
        //instance.deleteCollectionNamespacedImageStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedPolicy', function() {
      it('should call deleteCollectionNamespacedPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedPolicy
        //instance.deleteCollectionNamespacedPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedPolicyBinding', function() {
      it('should call deleteCollectionNamespacedPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedPolicyBinding
        //instance.deleteCollectionNamespacedPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedRoleBindingRestriction', function() {
      it('should call deleteCollectionNamespacedRoleBindingRestriction successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedRoleBindingRestriction
        //instance.deleteCollectionNamespacedRoleBindingRestriction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedRoute', function() {
      it('should call deleteCollectionNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedRoute
        //instance.deleteCollectionNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNamespacedTemplate', function() {
      it('should call deleteCollectionNamespacedTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNamespacedTemplate
        //instance.deleteCollectionNamespacedTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionNetNamespace', function() {
      it('should call deleteCollectionNetNamespace successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionNetNamespace
        //instance.deleteCollectionNetNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionOAuthAccessToken', function() {
      it('should call deleteCollectionOAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionOAuthAccessToken
        //instance.deleteCollectionOAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionOAuthAuthorizeToken', function() {
      it('should call deleteCollectionOAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionOAuthAuthorizeToken
        //instance.deleteCollectionOAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionOAuthClient', function() {
      it('should call deleteCollectionOAuthClient successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionOAuthClient
        //instance.deleteCollectionOAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionOAuthClientAuthorization', function() {
      it('should call deleteCollectionOAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionOAuthClientAuthorization
        //instance.deleteCollectionOAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCollectionUser', function() {
      it('should call deleteCollectionUser successfully', function(done) {
        //uncomment below and update the code to test deleteCollectionUser
        //instance.deleteCollectionUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGroup', function() {
      it('should call deleteGroup successfully', function(done) {
        //uncomment below and update the code to test deleteGroup
        //instance.deleteGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteHostSubnet', function() {
      it('should call deleteHostSubnet successfully', function(done) {
        //uncomment below and update the code to test deleteHostSubnet
        //instance.deleteHostSubnet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIdentity', function() {
      it('should call deleteIdentity successfully', function(done) {
        //uncomment below and update the code to test deleteIdentity
        //instance.deleteIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteImage', function() {
      it('should call deleteImage successfully', function(done) {
        //uncomment below and update the code to test deleteImage
        //instance.deleteImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteImageSignature', function() {
      it('should call deleteImageSignature successfully', function(done) {
        //uncomment below and update the code to test deleteImageSignature
        //instance.deleteImageSignature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedBuild', function() {
      it('should call deleteNamespacedBuild successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedBuild
        //instance.deleteNamespacedBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedBuildConfig', function() {
      it('should call deleteNamespacedBuildConfig successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedBuildConfig
        //instance.deleteNamespacedBuildConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedDeploymentConfig', function() {
      it('should call deleteNamespacedDeploymentConfig successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedDeploymentConfig
        //instance.deleteNamespacedDeploymentConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedEgressNetworkPolicy', function() {
      it('should call deleteNamespacedEgressNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedEgressNetworkPolicy
        //instance.deleteNamespacedEgressNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedImageStream', function() {
      it('should call deleteNamespacedImageStream successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedImageStream
        //instance.deleteNamespacedImageStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedImageStreamTag', function() {
      it('should call deleteNamespacedImageStreamTag successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedImageStreamTag
        //instance.deleteNamespacedImageStreamTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedPolicy', function() {
      it('should call deleteNamespacedPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedPolicy
        //instance.deleteNamespacedPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedPolicyBinding', function() {
      it('should call deleteNamespacedPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedPolicyBinding
        //instance.deleteNamespacedPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedRole', function() {
      it('should call deleteNamespacedRole successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedRole
        //instance.deleteNamespacedRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedRoleBinding', function() {
      it('should call deleteNamespacedRoleBinding successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedRoleBinding
        //instance.deleteNamespacedRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedRoleBindingRestriction', function() {
      it('should call deleteNamespacedRoleBindingRestriction successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedRoleBindingRestriction
        //instance.deleteNamespacedRoleBindingRestriction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedRoute', function() {
      it('should call deleteNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedRoute
        //instance.deleteNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespacedTemplate', function() {
      it('should call deleteNamespacedTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteNamespacedTemplate
        //instance.deleteNamespacedTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNetNamespace', function() {
      it('should call deleteNetNamespace successfully', function(done) {
        //uncomment below and update the code to test deleteNetNamespace
        //instance.deleteNetNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOAuthAccessToken', function() {
      it('should call deleteOAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test deleteOAuthAccessToken
        //instance.deleteOAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOAuthAuthorizeToken', function() {
      it('should call deleteOAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test deleteOAuthAuthorizeToken
        //instance.deleteOAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOAuthClient', function() {
      it('should call deleteOAuthClient successfully', function(done) {
        //uncomment below and update the code to test deleteOAuthClient
        //instance.deleteOAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOAuthClientAuthorization', function() {
      it('should call deleteOAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test deleteOAuthClientAuthorization
        //instance.deleteOAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProject', function() {
      it('should call deleteProject successfully', function(done) {
        //uncomment below and update the code to test deleteProject
        //instance.deleteProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUser', function() {
      it('should call deleteUser successfully', function(done) {
        //uncomment below and update the code to test deleteUser
        //instance.deleteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUserIdentityMapping', function() {
      it('should call deleteUserIdentityMapping successfully', function(done) {
        //uncomment below and update the code to test deleteUserIdentityMapping
        //instance.deleteUserIdentityMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAPIResources', function() {
      it('should call getAPIResources successfully', function(done) {
        //uncomment below and update the code to test getAPIResources
        //instance.getAPIResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLegacyAPIVersions', function() {
      it('should call getLegacyAPIVersions successfully', function(done) {
        //uncomment below and update the code to test getLegacyAPIVersions
        //instance.getLegacyAPIVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAppliedClusterResourceQuotaForAllNamespaces', function() {
      it('should call listAppliedClusterResourceQuotaForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listAppliedClusterResourceQuotaForAllNamespaces
        //instance.listAppliedClusterResourceQuotaForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBuildConfigForAllNamespaces', function() {
      it('should call listBuildConfigForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listBuildConfigForAllNamespaces
        //instance.listBuildConfigForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBuildForAllNamespaces', function() {
      it('should call listBuildForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listBuildForAllNamespaces
        //instance.listBuildForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClusterNetwork', function() {
      it('should call listClusterNetwork successfully', function(done) {
        //uncomment below and update the code to test listClusterNetwork
        //instance.listClusterNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClusterPolicy', function() {
      it('should call listClusterPolicy successfully', function(done) {
        //uncomment below and update the code to test listClusterPolicy
        //instance.listClusterPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClusterPolicyBinding', function() {
      it('should call listClusterPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test listClusterPolicyBinding
        //instance.listClusterPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClusterResourceQuota', function() {
      it('should call listClusterResourceQuota successfully', function(done) {
        //uncomment below and update the code to test listClusterResourceQuota
        //instance.listClusterResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClusterRole', function() {
      it('should call listClusterRole successfully', function(done) {
        //uncomment below and update the code to test listClusterRole
        //instance.listClusterRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClusterRoleBinding', function() {
      it('should call listClusterRoleBinding successfully', function(done) {
        //uncomment below and update the code to test listClusterRoleBinding
        //instance.listClusterRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeploymentConfigForAllNamespaces', function() {
      it('should call listDeploymentConfigForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listDeploymentConfigForAllNamespaces
        //instance.listDeploymentConfigForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEgressNetworkPolicyForAllNamespaces', function() {
      it('should call listEgressNetworkPolicyForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listEgressNetworkPolicyForAllNamespaces
        //instance.listEgressNetworkPolicyForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGroup', function() {
      it('should call listGroup successfully', function(done) {
        //uncomment below and update the code to test listGroup
        //instance.listGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHostSubnet', function() {
      it('should call listHostSubnet successfully', function(done) {
        //uncomment below and update the code to test listHostSubnet
        //instance.listHostSubnet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIdentity', function() {
      it('should call listIdentity successfully', function(done) {
        //uncomment below and update the code to test listIdentity
        //instance.listIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImage', function() {
      it('should call listImage successfully', function(done) {
        //uncomment below and update the code to test listImage
        //instance.listImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImageStreamForAllNamespaces', function() {
      it('should call listImageStreamForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listImageStreamForAllNamespaces
        //instance.listImageStreamForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImageStreamTagForAllNamespaces', function() {
      it('should call listImageStreamTagForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listImageStreamTagForAllNamespaces
        //instance.listImageStreamTagForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedAppliedClusterResourceQuota', function() {
      it('should call listNamespacedAppliedClusterResourceQuota successfully', function(done) {
        //uncomment below and update the code to test listNamespacedAppliedClusterResourceQuota
        //instance.listNamespacedAppliedClusterResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedBuild', function() {
      it('should call listNamespacedBuild successfully', function(done) {
        //uncomment below and update the code to test listNamespacedBuild
        //instance.listNamespacedBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedBuildConfig', function() {
      it('should call listNamespacedBuildConfig successfully', function(done) {
        //uncomment below and update the code to test listNamespacedBuildConfig
        //instance.listNamespacedBuildConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedDeploymentConfig', function() {
      it('should call listNamespacedDeploymentConfig successfully', function(done) {
        //uncomment below and update the code to test listNamespacedDeploymentConfig
        //instance.listNamespacedDeploymentConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedEgressNetworkPolicy', function() {
      it('should call listNamespacedEgressNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test listNamespacedEgressNetworkPolicy
        //instance.listNamespacedEgressNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedImageStream', function() {
      it('should call listNamespacedImageStream successfully', function(done) {
        //uncomment below and update the code to test listNamespacedImageStream
        //instance.listNamespacedImageStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedImageStreamTag', function() {
      it('should call listNamespacedImageStreamTag successfully', function(done) {
        //uncomment below and update the code to test listNamespacedImageStreamTag
        //instance.listNamespacedImageStreamTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedPolicy', function() {
      it('should call listNamespacedPolicy successfully', function(done) {
        //uncomment below and update the code to test listNamespacedPolicy
        //instance.listNamespacedPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedPolicyBinding', function() {
      it('should call listNamespacedPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test listNamespacedPolicyBinding
        //instance.listNamespacedPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedRole', function() {
      it('should call listNamespacedRole successfully', function(done) {
        //uncomment below and update the code to test listNamespacedRole
        //instance.listNamespacedRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedRoleBinding', function() {
      it('should call listNamespacedRoleBinding successfully', function(done) {
        //uncomment below and update the code to test listNamespacedRoleBinding
        //instance.listNamespacedRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedRoleBindingRestriction', function() {
      it('should call listNamespacedRoleBindingRestriction successfully', function(done) {
        //uncomment below and update the code to test listNamespacedRoleBindingRestriction
        //instance.listNamespacedRoleBindingRestriction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedRoute', function() {
      it('should call listNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test listNamespacedRoute
        //instance.listNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespacedTemplate', function() {
      it('should call listNamespacedTemplate successfully', function(done) {
        //uncomment below and update the code to test listNamespacedTemplate
        //instance.listNamespacedTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNetNamespace', function() {
      it('should call listNetNamespace successfully', function(done) {
        //uncomment below and update the code to test listNetNamespace
        //instance.listNetNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOAuthAccessToken', function() {
      it('should call listOAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test listOAuthAccessToken
        //instance.listOAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOAuthAuthorizeToken', function() {
      it('should call listOAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test listOAuthAuthorizeToken
        //instance.listOAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOAuthClient', function() {
      it('should call listOAuthClient successfully', function(done) {
        //uncomment below and update the code to test listOAuthClient
        //instance.listOAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOAuthClientAuthorization', function() {
      it('should call listOAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test listOAuthClientAuthorization
        //instance.listOAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPolicyBindingForAllNamespaces', function() {
      it('should call listPolicyBindingForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listPolicyBindingForAllNamespaces
        //instance.listPolicyBindingForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPolicyForAllNamespaces', function() {
      it('should call listPolicyForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listPolicyForAllNamespaces
        //instance.listPolicyForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProject', function() {
      it('should call listProject successfully', function(done) {
        //uncomment below and update the code to test listProject
        //instance.listProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProjectRequest', function() {
      it('should call listProjectRequest successfully', function(done) {
        //uncomment below and update the code to test listProjectRequest
        //instance.listProjectRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoleBindingForAllNamespaces', function() {
      it('should call listRoleBindingForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listRoleBindingForAllNamespaces
        //instance.listRoleBindingForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoleBindingRestrictionForAllNamespaces', function() {
      it('should call listRoleBindingRestrictionForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listRoleBindingRestrictionForAllNamespaces
        //instance.listRoleBindingRestrictionForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoleForAllNamespaces', function() {
      it('should call listRoleForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listRoleForAllNamespaces
        //instance.listRoleForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRouteForAllNamespaces', function() {
      it('should call listRouteForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listRouteForAllNamespaces
        //instance.listRouteForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTemplateForAllNamespaces', function() {
      it('should call listTemplateForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test listTemplateForAllNamespaces
        //instance.listTemplateForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUser', function() {
      it('should call listUser successfully', function(done) {
        //uncomment below and update the code to test listUser
        //instance.listUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchClusterNetwork', function() {
      it('should call patchClusterNetwork successfully', function(done) {
        //uncomment below and update the code to test patchClusterNetwork
        //instance.patchClusterNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchClusterPolicy', function() {
      it('should call patchClusterPolicy successfully', function(done) {
        //uncomment below and update the code to test patchClusterPolicy
        //instance.patchClusterPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchClusterPolicyBinding', function() {
      it('should call patchClusterPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test patchClusterPolicyBinding
        //instance.patchClusterPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchClusterResourceQuota', function() {
      it('should call patchClusterResourceQuota successfully', function(done) {
        //uncomment below and update the code to test patchClusterResourceQuota
        //instance.patchClusterResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchClusterResourceQuotaStatus', function() {
      it('should call patchClusterResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test patchClusterResourceQuotaStatus
        //instance.patchClusterResourceQuotaStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchClusterRole', function() {
      it('should call patchClusterRole successfully', function(done) {
        //uncomment below and update the code to test patchClusterRole
        //instance.patchClusterRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchClusterRoleBinding', function() {
      it('should call patchClusterRoleBinding successfully', function(done) {
        //uncomment below and update the code to test patchClusterRoleBinding
        //instance.patchClusterRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchGroup', function() {
      it('should call patchGroup successfully', function(done) {
        //uncomment below and update the code to test patchGroup
        //instance.patchGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchHostSubnet', function() {
      it('should call patchHostSubnet successfully', function(done) {
        //uncomment below and update the code to test patchHostSubnet
        //instance.patchHostSubnet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchIdentity', function() {
      it('should call patchIdentity successfully', function(done) {
        //uncomment below and update the code to test patchIdentity
        //instance.patchIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchImage', function() {
      it('should call patchImage successfully', function(done) {
        //uncomment below and update the code to test patchImage
        //instance.patchImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedBuild', function() {
      it('should call patchNamespacedBuild successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedBuild
        //instance.patchNamespacedBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedBuildConfig', function() {
      it('should call patchNamespacedBuildConfig successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedBuildConfig
        //instance.patchNamespacedBuildConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedDeploymentConfig', function() {
      it('should call patchNamespacedDeploymentConfig successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedDeploymentConfig
        //instance.patchNamespacedDeploymentConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedDeploymentConfigStatus', function() {
      it('should call patchNamespacedDeploymentConfigStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedDeploymentConfigStatus
        //instance.patchNamespacedDeploymentConfigStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedEgressNetworkPolicy', function() {
      it('should call patchNamespacedEgressNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedEgressNetworkPolicy
        //instance.patchNamespacedEgressNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedImageStream', function() {
      it('should call patchNamespacedImageStream successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedImageStream
        //instance.patchNamespacedImageStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedImageStreamStatus', function() {
      it('should call patchNamespacedImageStreamStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedImageStreamStatus
        //instance.patchNamespacedImageStreamStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedImageStreamTag', function() {
      it('should call patchNamespacedImageStreamTag successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedImageStreamTag
        //instance.patchNamespacedImageStreamTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedPolicy', function() {
      it('should call patchNamespacedPolicy successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedPolicy
        //instance.patchNamespacedPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedPolicyBinding', function() {
      it('should call patchNamespacedPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedPolicyBinding
        //instance.patchNamespacedPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedRole', function() {
      it('should call patchNamespacedRole successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedRole
        //instance.patchNamespacedRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedRoleBinding', function() {
      it('should call patchNamespacedRoleBinding successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedRoleBinding
        //instance.patchNamespacedRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedRoleBindingRestriction', function() {
      it('should call patchNamespacedRoleBindingRestriction successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedRoleBindingRestriction
        //instance.patchNamespacedRoleBindingRestriction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedRoute', function() {
      it('should call patchNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedRoute
        //instance.patchNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedRouteStatus', function() {
      it('should call patchNamespacedRouteStatus successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedRouteStatus
        //instance.patchNamespacedRouteStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedScaleScale', function() {
      it('should call patchNamespacedScaleScale successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedScaleScale
        //instance.patchNamespacedScaleScale(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNamespacedTemplate', function() {
      it('should call patchNamespacedTemplate successfully', function(done) {
        //uncomment below and update the code to test patchNamespacedTemplate
        //instance.patchNamespacedTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchNetNamespace', function() {
      it('should call patchNetNamespace successfully', function(done) {
        //uncomment below and update the code to test patchNetNamespace
        //instance.patchNetNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchOAuthAccessToken', function() {
      it('should call patchOAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test patchOAuthAccessToken
        //instance.patchOAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchOAuthAuthorizeToken', function() {
      it('should call patchOAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test patchOAuthAuthorizeToken
        //instance.patchOAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchOAuthClient', function() {
      it('should call patchOAuthClient successfully', function(done) {
        //uncomment below and update the code to test patchOAuthClient
        //instance.patchOAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchOAuthClientAuthorization', function() {
      it('should call patchOAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test patchOAuthClientAuthorization
        //instance.patchOAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchProject', function() {
      it('should call patchProject successfully', function(done) {
        //uncomment below and update the code to test patchProject
        //instance.patchProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchUser', function() {
      it('should call patchUser successfully', function(done) {
        //uncomment below and update the code to test patchUser
        //instance.patchUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchUserIdentityMapping', function() {
      it('should call patchUserIdentityMapping successfully', function(done) {
        //uncomment below and update the code to test patchUserIdentityMapping
        //instance.patchUserIdentityMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readClusterNetwork', function() {
      it('should call readClusterNetwork successfully', function(done) {
        //uncomment below and update the code to test readClusterNetwork
        //instance.readClusterNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readClusterPolicy', function() {
      it('should call readClusterPolicy successfully', function(done) {
        //uncomment below and update the code to test readClusterPolicy
        //instance.readClusterPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readClusterPolicyBinding', function() {
      it('should call readClusterPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test readClusterPolicyBinding
        //instance.readClusterPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readClusterResourceQuota', function() {
      it('should call readClusterResourceQuota successfully', function(done) {
        //uncomment below and update the code to test readClusterResourceQuota
        //instance.readClusterResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readClusterResourceQuotaStatus', function() {
      it('should call readClusterResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test readClusterResourceQuotaStatus
        //instance.readClusterResourceQuotaStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readClusterRole', function() {
      it('should call readClusterRole successfully', function(done) {
        //uncomment below and update the code to test readClusterRole
        //instance.readClusterRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readClusterRoleBinding', function() {
      it('should call readClusterRoleBinding successfully', function(done) {
        //uncomment below and update the code to test readClusterRoleBinding
        //instance.readClusterRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readGroup', function() {
      it('should call readGroup successfully', function(done) {
        //uncomment below and update the code to test readGroup
        //instance.readGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readHostSubnet', function() {
      it('should call readHostSubnet successfully', function(done) {
        //uncomment below and update the code to test readHostSubnet
        //instance.readHostSubnet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readIdentity', function() {
      it('should call readIdentity successfully', function(done) {
        //uncomment below and update the code to test readIdentity
        //instance.readIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readImage', function() {
      it('should call readImage successfully', function(done) {
        //uncomment below and update the code to test readImage
        //instance.readImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedAppliedClusterResourceQuota', function() {
      it('should call readNamespacedAppliedClusterResourceQuota successfully', function(done) {
        //uncomment below and update the code to test readNamespacedAppliedClusterResourceQuota
        //instance.readNamespacedAppliedClusterResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedBuild', function() {
      it('should call readNamespacedBuild successfully', function(done) {
        //uncomment below and update the code to test readNamespacedBuild
        //instance.readNamespacedBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedBuildConfig', function() {
      it('should call readNamespacedBuildConfig successfully', function(done) {
        //uncomment below and update the code to test readNamespacedBuildConfig
        //instance.readNamespacedBuildConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedBuildLogLog', function() {
      it('should call readNamespacedBuildLogLog successfully', function(done) {
        //uncomment below and update the code to test readNamespacedBuildLogLog
        //instance.readNamespacedBuildLogLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedDeploymentConfig', function() {
      it('should call readNamespacedDeploymentConfig successfully', function(done) {
        //uncomment below and update the code to test readNamespacedDeploymentConfig
        //instance.readNamespacedDeploymentConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedDeploymentConfigStatus', function() {
      it('should call readNamespacedDeploymentConfigStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedDeploymentConfigStatus
        //instance.readNamespacedDeploymentConfigStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedDeploymentLogLog', function() {
      it('should call readNamespacedDeploymentLogLog successfully', function(done) {
        //uncomment below and update the code to test readNamespacedDeploymentLogLog
        //instance.readNamespacedDeploymentLogLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedEgressNetworkPolicy', function() {
      it('should call readNamespacedEgressNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test readNamespacedEgressNetworkPolicy
        //instance.readNamespacedEgressNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedImageStream', function() {
      it('should call readNamespacedImageStream successfully', function(done) {
        //uncomment below and update the code to test readNamespacedImageStream
        //instance.readNamespacedImageStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedImageStreamImage', function() {
      it('should call readNamespacedImageStreamImage successfully', function(done) {
        //uncomment below and update the code to test readNamespacedImageStreamImage
        //instance.readNamespacedImageStreamImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedImageStreamStatus', function() {
      it('should call readNamespacedImageStreamStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedImageStreamStatus
        //instance.readNamespacedImageStreamStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedImageStreamTag', function() {
      it('should call readNamespacedImageStreamTag successfully', function(done) {
        //uncomment below and update the code to test readNamespacedImageStreamTag
        //instance.readNamespacedImageStreamTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedPolicy', function() {
      it('should call readNamespacedPolicy successfully', function(done) {
        //uncomment below and update the code to test readNamespacedPolicy
        //instance.readNamespacedPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedPolicyBinding', function() {
      it('should call readNamespacedPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test readNamespacedPolicyBinding
        //instance.readNamespacedPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedRole', function() {
      it('should call readNamespacedRole successfully', function(done) {
        //uncomment below and update the code to test readNamespacedRole
        //instance.readNamespacedRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedRoleBinding', function() {
      it('should call readNamespacedRoleBinding successfully', function(done) {
        //uncomment below and update the code to test readNamespacedRoleBinding
        //instance.readNamespacedRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedRoleBindingRestriction', function() {
      it('should call readNamespacedRoleBindingRestriction successfully', function(done) {
        //uncomment below and update the code to test readNamespacedRoleBindingRestriction
        //instance.readNamespacedRoleBindingRestriction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedRoute', function() {
      it('should call readNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test readNamespacedRoute
        //instance.readNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedRouteStatus', function() {
      it('should call readNamespacedRouteStatus successfully', function(done) {
        //uncomment below and update the code to test readNamespacedRouteStatus
        //instance.readNamespacedRouteStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedScaleScale', function() {
      it('should call readNamespacedScaleScale successfully', function(done) {
        //uncomment below and update the code to test readNamespacedScaleScale
        //instance.readNamespacedScaleScale(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedSecretListSecrets', function() {
      it('should call readNamespacedSecretListSecrets successfully', function(done) {
        //uncomment below and update the code to test readNamespacedSecretListSecrets
        //instance.readNamespacedSecretListSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNamespacedTemplate', function() {
      it('should call readNamespacedTemplate successfully', function(done) {
        //uncomment below and update the code to test readNamespacedTemplate
        //instance.readNamespacedTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readNetNamespace', function() {
      it('should call readNetNamespace successfully', function(done) {
        //uncomment below and update the code to test readNetNamespace
        //instance.readNetNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readOAuthAccessToken', function() {
      it('should call readOAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test readOAuthAccessToken
        //instance.readOAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readOAuthAuthorizeToken', function() {
      it('should call readOAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test readOAuthAuthorizeToken
        //instance.readOAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readOAuthClient', function() {
      it('should call readOAuthClient successfully', function(done) {
        //uncomment below and update the code to test readOAuthClient
        //instance.readOAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readOAuthClientAuthorization', function() {
      it('should call readOAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test readOAuthClientAuthorization
        //instance.readOAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readProject', function() {
      it('should call readProject successfully', function(done) {
        //uncomment below and update the code to test readProject
        //instance.readProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readUser', function() {
      it('should call readUser successfully', function(done) {
        //uncomment below and update the code to test readUser
        //instance.readUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readUserIdentityMapping', function() {
      it('should call readUserIdentityMapping successfully', function(done) {
        //uncomment below and update the code to test readUserIdentityMapping
        //instance.readUserIdentityMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceClusterNetwork', function() {
      it('should call replaceClusterNetwork successfully', function(done) {
        //uncomment below and update the code to test replaceClusterNetwork
        //instance.replaceClusterNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceClusterPolicy', function() {
      it('should call replaceClusterPolicy successfully', function(done) {
        //uncomment below and update the code to test replaceClusterPolicy
        //instance.replaceClusterPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceClusterPolicyBinding', function() {
      it('should call replaceClusterPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test replaceClusterPolicyBinding
        //instance.replaceClusterPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceClusterResourceQuota', function() {
      it('should call replaceClusterResourceQuota successfully', function(done) {
        //uncomment below and update the code to test replaceClusterResourceQuota
        //instance.replaceClusterResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceClusterResourceQuotaStatus', function() {
      it('should call replaceClusterResourceQuotaStatus successfully', function(done) {
        //uncomment below and update the code to test replaceClusterResourceQuotaStatus
        //instance.replaceClusterResourceQuotaStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceClusterRole', function() {
      it('should call replaceClusterRole successfully', function(done) {
        //uncomment below and update the code to test replaceClusterRole
        //instance.replaceClusterRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceClusterRoleBinding', function() {
      it('should call replaceClusterRoleBinding successfully', function(done) {
        //uncomment below and update the code to test replaceClusterRoleBinding
        //instance.replaceClusterRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceGroup', function() {
      it('should call replaceGroup successfully', function(done) {
        //uncomment below and update the code to test replaceGroup
        //instance.replaceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceHostSubnet', function() {
      it('should call replaceHostSubnet successfully', function(done) {
        //uncomment below and update the code to test replaceHostSubnet
        //instance.replaceHostSubnet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceIdentity', function() {
      it('should call replaceIdentity successfully', function(done) {
        //uncomment below and update the code to test replaceIdentity
        //instance.replaceIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceImage', function() {
      it('should call replaceImage successfully', function(done) {
        //uncomment below and update the code to test replaceImage
        //instance.replaceImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedBuild', function() {
      it('should call replaceNamespacedBuild successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedBuild
        //instance.replaceNamespacedBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedBuildConfig', function() {
      it('should call replaceNamespacedBuildConfig successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedBuildConfig
        //instance.replaceNamespacedBuildConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedBuildDetails', function() {
      it('should call replaceNamespacedBuildDetails successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedBuildDetails
        //instance.replaceNamespacedBuildDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedDeploymentConfig', function() {
      it('should call replaceNamespacedDeploymentConfig successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedDeploymentConfig
        //instance.replaceNamespacedDeploymentConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedDeploymentConfigStatus', function() {
      it('should call replaceNamespacedDeploymentConfigStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedDeploymentConfigStatus
        //instance.replaceNamespacedDeploymentConfigStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedEgressNetworkPolicy', function() {
      it('should call replaceNamespacedEgressNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedEgressNetworkPolicy
        //instance.replaceNamespacedEgressNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedImageStream', function() {
      it('should call replaceNamespacedImageStream successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedImageStream
        //instance.replaceNamespacedImageStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedImageStreamStatus', function() {
      it('should call replaceNamespacedImageStreamStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedImageStreamStatus
        //instance.replaceNamespacedImageStreamStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedImageStreamTag', function() {
      it('should call replaceNamespacedImageStreamTag successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedImageStreamTag
        //instance.replaceNamespacedImageStreamTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedPolicy', function() {
      it('should call replaceNamespacedPolicy successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedPolicy
        //instance.replaceNamespacedPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedPolicyBinding', function() {
      it('should call replaceNamespacedPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedPolicyBinding
        //instance.replaceNamespacedPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedRole', function() {
      it('should call replaceNamespacedRole successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedRole
        //instance.replaceNamespacedRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedRoleBinding', function() {
      it('should call replaceNamespacedRoleBinding successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedRoleBinding
        //instance.replaceNamespacedRoleBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedRoleBindingRestriction', function() {
      it('should call replaceNamespacedRoleBindingRestriction successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedRoleBindingRestriction
        //instance.replaceNamespacedRoleBindingRestriction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedRoute', function() {
      it('should call replaceNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedRoute
        //instance.replaceNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedRouteStatus', function() {
      it('should call replaceNamespacedRouteStatus successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedRouteStatus
        //instance.replaceNamespacedRouteStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedScaleScale', function() {
      it('should call replaceNamespacedScaleScale successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedScaleScale
        //instance.replaceNamespacedScaleScale(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNamespacedTemplate', function() {
      it('should call replaceNamespacedTemplate successfully', function(done) {
        //uncomment below and update the code to test replaceNamespacedTemplate
        //instance.replaceNamespacedTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceNetNamespace', function() {
      it('should call replaceNetNamespace successfully', function(done) {
        //uncomment below and update the code to test replaceNetNamespace
        //instance.replaceNetNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceOAuthAccessToken', function() {
      it('should call replaceOAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test replaceOAuthAccessToken
        //instance.replaceOAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceOAuthAuthorizeToken', function() {
      it('should call replaceOAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test replaceOAuthAuthorizeToken
        //instance.replaceOAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceOAuthClient', function() {
      it('should call replaceOAuthClient successfully', function(done) {
        //uncomment below and update the code to test replaceOAuthClient
        //instance.replaceOAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceOAuthClientAuthorization', function() {
      it('should call replaceOAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test replaceOAuthClientAuthorization
        //instance.replaceOAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceProject', function() {
      it('should call replaceProject successfully', function(done) {
        //uncomment below and update the code to test replaceProject
        //instance.replaceProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceUser', function() {
      it('should call replaceUser successfully', function(done) {
        //uncomment below and update the code to test replaceUser
        //instance.replaceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceUserIdentityMapping', function() {
      it('should call replaceUserIdentityMapping successfully', function(done) {
        //uncomment below and update the code to test replaceUserIdentityMapping
        //instance.replaceUserIdentityMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchBuildConfigListForAllNamespaces', function() {
      it('should call watchBuildConfigListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchBuildConfigListForAllNamespaces
        //instance.watchBuildConfigListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchBuildListForAllNamespaces', function() {
      it('should call watchBuildListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchBuildListForAllNamespaces
        //instance.watchBuildListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchClusterNetwork', function() {
      it('should call watchClusterNetwork successfully', function(done) {
        //uncomment below and update the code to test watchClusterNetwork
        //instance.watchClusterNetwork(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchClusterNetworkList', function() {
      it('should call watchClusterNetworkList successfully', function(done) {
        //uncomment below and update the code to test watchClusterNetworkList
        //instance.watchClusterNetworkList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchClusterPolicy', function() {
      it('should call watchClusterPolicy successfully', function(done) {
        //uncomment below and update the code to test watchClusterPolicy
        //instance.watchClusterPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchClusterPolicyBinding', function() {
      it('should call watchClusterPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test watchClusterPolicyBinding
        //instance.watchClusterPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchClusterPolicyBindingList', function() {
      it('should call watchClusterPolicyBindingList successfully', function(done) {
        //uncomment below and update the code to test watchClusterPolicyBindingList
        //instance.watchClusterPolicyBindingList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchClusterPolicyList', function() {
      it('should call watchClusterPolicyList successfully', function(done) {
        //uncomment below and update the code to test watchClusterPolicyList
        //instance.watchClusterPolicyList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchClusterResourceQuota', function() {
      it('should call watchClusterResourceQuota successfully', function(done) {
        //uncomment below and update the code to test watchClusterResourceQuota
        //instance.watchClusterResourceQuota(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchClusterResourceQuotaList', function() {
      it('should call watchClusterResourceQuotaList successfully', function(done) {
        //uncomment below and update the code to test watchClusterResourceQuotaList
        //instance.watchClusterResourceQuotaList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchDeploymentConfigListForAllNamespaces', function() {
      it('should call watchDeploymentConfigListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchDeploymentConfigListForAllNamespaces
        //instance.watchDeploymentConfigListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchEgressNetworkPolicyListForAllNamespaces', function() {
      it('should call watchEgressNetworkPolicyListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchEgressNetworkPolicyListForAllNamespaces
        //instance.watchEgressNetworkPolicyListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchGroup', function() {
      it('should call watchGroup successfully', function(done) {
        //uncomment below and update the code to test watchGroup
        //instance.watchGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchGroupList', function() {
      it('should call watchGroupList successfully', function(done) {
        //uncomment below and update the code to test watchGroupList
        //instance.watchGroupList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchHostSubnet', function() {
      it('should call watchHostSubnet successfully', function(done) {
        //uncomment below and update the code to test watchHostSubnet
        //instance.watchHostSubnet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchHostSubnetList', function() {
      it('should call watchHostSubnetList successfully', function(done) {
        //uncomment below and update the code to test watchHostSubnetList
        //instance.watchHostSubnetList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchIdentity', function() {
      it('should call watchIdentity successfully', function(done) {
        //uncomment below and update the code to test watchIdentity
        //instance.watchIdentity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchIdentityList', function() {
      it('should call watchIdentityList successfully', function(done) {
        //uncomment below and update the code to test watchIdentityList
        //instance.watchIdentityList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchImage', function() {
      it('should call watchImage successfully', function(done) {
        //uncomment below and update the code to test watchImage
        //instance.watchImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchImageList', function() {
      it('should call watchImageList successfully', function(done) {
        //uncomment below and update the code to test watchImageList
        //instance.watchImageList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchImageStreamListForAllNamespaces', function() {
      it('should call watchImageStreamListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchImageStreamListForAllNamespaces
        //instance.watchImageStreamListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedBuild', function() {
      it('should call watchNamespacedBuild successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedBuild
        //instance.watchNamespacedBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedBuildConfig', function() {
      it('should call watchNamespacedBuildConfig successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedBuildConfig
        //instance.watchNamespacedBuildConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedBuildConfigList', function() {
      it('should call watchNamespacedBuildConfigList successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedBuildConfigList
        //instance.watchNamespacedBuildConfigList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedBuildList', function() {
      it('should call watchNamespacedBuildList successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedBuildList
        //instance.watchNamespacedBuildList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedDeploymentConfig', function() {
      it('should call watchNamespacedDeploymentConfig successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedDeploymentConfig
        //instance.watchNamespacedDeploymentConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedDeploymentConfigList', function() {
      it('should call watchNamespacedDeploymentConfigList successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedDeploymentConfigList
        //instance.watchNamespacedDeploymentConfigList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedEgressNetworkPolicy', function() {
      it('should call watchNamespacedEgressNetworkPolicy successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedEgressNetworkPolicy
        //instance.watchNamespacedEgressNetworkPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedEgressNetworkPolicyList', function() {
      it('should call watchNamespacedEgressNetworkPolicyList successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedEgressNetworkPolicyList
        //instance.watchNamespacedEgressNetworkPolicyList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedImageStream', function() {
      it('should call watchNamespacedImageStream successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedImageStream
        //instance.watchNamespacedImageStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedImageStreamList', function() {
      it('should call watchNamespacedImageStreamList successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedImageStreamList
        //instance.watchNamespacedImageStreamList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedPolicy', function() {
      it('should call watchNamespacedPolicy successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedPolicy
        //instance.watchNamespacedPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedPolicyBinding', function() {
      it('should call watchNamespacedPolicyBinding successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedPolicyBinding
        //instance.watchNamespacedPolicyBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedPolicyBindingList', function() {
      it('should call watchNamespacedPolicyBindingList successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedPolicyBindingList
        //instance.watchNamespacedPolicyBindingList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedPolicyList', function() {
      it('should call watchNamespacedPolicyList successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedPolicyList
        //instance.watchNamespacedPolicyList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedRoleBindingRestriction', function() {
      it('should call watchNamespacedRoleBindingRestriction successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedRoleBindingRestriction
        //instance.watchNamespacedRoleBindingRestriction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedRoleBindingRestrictionList', function() {
      it('should call watchNamespacedRoleBindingRestrictionList successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedRoleBindingRestrictionList
        //instance.watchNamespacedRoleBindingRestrictionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedRoute', function() {
      it('should call watchNamespacedRoute successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedRoute
        //instance.watchNamespacedRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedRouteList', function() {
      it('should call watchNamespacedRouteList successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedRouteList
        //instance.watchNamespacedRouteList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedTemplate', function() {
      it('should call watchNamespacedTemplate successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedTemplate
        //instance.watchNamespacedTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNamespacedTemplateList', function() {
      it('should call watchNamespacedTemplateList successfully', function(done) {
        //uncomment below and update the code to test watchNamespacedTemplateList
        //instance.watchNamespacedTemplateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNetNamespace', function() {
      it('should call watchNetNamespace successfully', function(done) {
        //uncomment below and update the code to test watchNetNamespace
        //instance.watchNetNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchNetNamespaceList', function() {
      it('should call watchNetNamespaceList successfully', function(done) {
        //uncomment below and update the code to test watchNetNamespaceList
        //instance.watchNetNamespaceList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOAuthAccessToken', function() {
      it('should call watchOAuthAccessToken successfully', function(done) {
        //uncomment below and update the code to test watchOAuthAccessToken
        //instance.watchOAuthAccessToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOAuthAccessTokenList', function() {
      it('should call watchOAuthAccessTokenList successfully', function(done) {
        //uncomment below and update the code to test watchOAuthAccessTokenList
        //instance.watchOAuthAccessTokenList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOAuthAuthorizeToken', function() {
      it('should call watchOAuthAuthorizeToken successfully', function(done) {
        //uncomment below and update the code to test watchOAuthAuthorizeToken
        //instance.watchOAuthAuthorizeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOAuthAuthorizeTokenList', function() {
      it('should call watchOAuthAuthorizeTokenList successfully', function(done) {
        //uncomment below and update the code to test watchOAuthAuthorizeTokenList
        //instance.watchOAuthAuthorizeTokenList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOAuthClient', function() {
      it('should call watchOAuthClient successfully', function(done) {
        //uncomment below and update the code to test watchOAuthClient
        //instance.watchOAuthClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOAuthClientAuthorization', function() {
      it('should call watchOAuthClientAuthorization successfully', function(done) {
        //uncomment below and update the code to test watchOAuthClientAuthorization
        //instance.watchOAuthClientAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOAuthClientAuthorizationList', function() {
      it('should call watchOAuthClientAuthorizationList successfully', function(done) {
        //uncomment below and update the code to test watchOAuthClientAuthorizationList
        //instance.watchOAuthClientAuthorizationList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchOAuthClientList', function() {
      it('should call watchOAuthClientList successfully', function(done) {
        //uncomment below and update the code to test watchOAuthClientList
        //instance.watchOAuthClientList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchPolicyBindingListForAllNamespaces', function() {
      it('should call watchPolicyBindingListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchPolicyBindingListForAllNamespaces
        //instance.watchPolicyBindingListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchPolicyListForAllNamespaces', function() {
      it('should call watchPolicyListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchPolicyListForAllNamespaces
        //instance.watchPolicyListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchProject', function() {
      it('should call watchProject successfully', function(done) {
        //uncomment below and update the code to test watchProject
        //instance.watchProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchProjectList', function() {
      it('should call watchProjectList successfully', function(done) {
        //uncomment below and update the code to test watchProjectList
        //instance.watchProjectList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchRoleBindingRestrictionListForAllNamespaces', function() {
      it('should call watchRoleBindingRestrictionListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchRoleBindingRestrictionListForAllNamespaces
        //instance.watchRoleBindingRestrictionListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchRouteListForAllNamespaces', function() {
      it('should call watchRouteListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchRouteListForAllNamespaces
        //instance.watchRouteListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchTemplateListForAllNamespaces', function() {
      it('should call watchTemplateListForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test watchTemplateListForAllNamespaces
        //instance.watchTemplateListForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchUser', function() {
      it('should call watchUser successfully', function(done) {
        //uncomment below and update the code to test watchUser
        //instance.watchUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchUserList', function() {
      it('should call watchUserList successfully', function(done) {
        //uncomment below and update the code to test watchUserList
        //instance.watchUserList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
