/**
 * OpenShift API (with Kubernetes)
 * OpenShift provides builds, application lifecycle, image content management, and administrative policy on top of Kubernetes. The API allows consistent management of those objects.  All API operations are authenticated via an Authorization bearer token that is provided for service accounts as a generated secret (in JWT form) or via the native OAuth endpoint located at /oauth/authorize. Core infrastructure components may use client certificates that require no authentication.  All API operations return a 'resourceVersion' string that represents the version of the object in the underlying storage. The standard LIST operation performs a snapshot read of the underlying objects, returning a resourceVersion representing a consistent version of the listed objects. The WATCH operation allows all updates to a set of objects after the provided resourceVersion to be observed by a client. By listing and beginning a watch from the returned resourceVersion, clients may observe a consistent view of the state of one or more objects. Note that WATCH always returns the update after the provided resourceVersion. Watch may be extended a limited time in the past - using etcd 2 the watch window is 1000 events (which on a large cluster may only be a few tens of seconds) so clients must explicitly handle the \"watch to old error\" by re-listing.  Objects are divided into two rough categories - those that have a lifecycle and must reflect the state of the cluster, and those that have no state. Objects with lifecycle typically have three main sections:  * 'metadata' common to all objects * a 'spec' that represents the desired state * a 'status' that represents how much of the desired state is reflected on   the cluster at the current time  Objects that have no state have 'metadata' but may lack a 'spec' or 'status' section.  Objects are divided into those that are namespace scoped (only exist inside of a namespace) and those that are cluster scoped (exist outside of a namespace). A namespace scoped resource will be deleted when the namespace is deleted and cannot be created if the namespace has not yet been created or is in the process of deletion. Cluster scoped resources are typically only accessible to admins - resources like nodes, persistent volumes, and cluster policy.  All objects have a schema that is a combination of the 'kind' and 'apiVersion' fields. This schema is additive only for any given version - no backwards incompatible changes are allowed without incrementing the apiVersion. The server will return and accept a number of standard responses that share a common schema - for instance, the common error type is 'metav1.Status' (described below) and will be returned on any error from the API server.  The API is available in multiple serialization formats - the default is JSON (Accept: application/json and Content-Type: application/json) but clients may also use YAML (application/yaml) or the native Protobuf schema (application/vnd.kubernetes.protobuf). Note that the format of the WATCH API call is slightly different - for JSON it returns newline delimited objects while for Protobuf it returns length-delimited frames (4 bytes in network-order) that contain a 'versioned.Watch' Protobuf object.  See the OpenShift documentation at https://docs.openshift.org for more information. 
 *
 * OpenAPI spec version: v3.6.173.0.21
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenShiftApiWithKubernetes);
  }
}(this, function(expect, OpenShiftApiWithKubernetes) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenShiftApiWithKubernetes.SecurityOpenshiftIoV1Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SecurityOpenshiftIoV1Api', function() {
    describe('createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReview', function() {
      it('should call createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReview successfully', function(done) {
        //uncomment below and update the code to test createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReview
        //instance.createSecurityOpenshiftIoV1NamespacedPodSecurityPolicyReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReview', function() {
      it('should call createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReview successfully', function(done) {
        //uncomment below and update the code to test createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReview
        //instance.createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySelfSubjectReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReview', function() {
      it('should call createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReview successfully', function(done) {
        //uncomment below and update the code to test createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReview
        //instance.createSecurityOpenshiftIoV1NamespacedPodSecurityPolicySubjectReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSecurityOpenshiftIoV1PodSecurityPolicyReviewForAllNamespaces', function() {
      it('should call createSecurityOpenshiftIoV1PodSecurityPolicyReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createSecurityOpenshiftIoV1PodSecurityPolicyReviewForAllNamespaces
        //instance.createSecurityOpenshiftIoV1PodSecurityPolicyReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSecurityOpenshiftIoV1PodSecurityPolicySelfSubjectReviewForAllNamespaces', function() {
      it('should call createSecurityOpenshiftIoV1PodSecurityPolicySelfSubjectReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createSecurityOpenshiftIoV1PodSecurityPolicySelfSubjectReviewForAllNamespaces
        //instance.createSecurityOpenshiftIoV1PodSecurityPolicySelfSubjectReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSecurityOpenshiftIoV1PodSecurityPolicySubjectReviewForAllNamespaces', function() {
      it('should call createSecurityOpenshiftIoV1PodSecurityPolicySubjectReviewForAllNamespaces successfully', function(done) {
        //uncomment below and update the code to test createSecurityOpenshiftIoV1PodSecurityPolicySubjectReviewForAllNamespaces
        //instance.createSecurityOpenshiftIoV1PodSecurityPolicySubjectReviewForAllNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSecurityOpenshiftIoV1SecurityContextConstraints', function() {
      it('should call createSecurityOpenshiftIoV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test createSecurityOpenshiftIoV1SecurityContextConstraints
        //instance.createSecurityOpenshiftIoV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraints', function() {
      it('should call deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraints
        //instance.deleteSecurityOpenshiftIoV1CollectionSecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSecurityOpenshiftIoV1SecurityContextConstraints', function() {
      it('should call deleteSecurityOpenshiftIoV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test deleteSecurityOpenshiftIoV1SecurityContextConstraints
        //instance.deleteSecurityOpenshiftIoV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecurityOpenshiftIoV1APIResources', function() {
      it('should call getSecurityOpenshiftIoV1APIResources successfully', function(done) {
        //uncomment below and update the code to test getSecurityOpenshiftIoV1APIResources
        //instance.getSecurityOpenshiftIoV1APIResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSecurityOpenshiftIoV1SecurityContextConstraints', function() {
      it('should call listSecurityOpenshiftIoV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test listSecurityOpenshiftIoV1SecurityContextConstraints
        //instance.listSecurityOpenshiftIoV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchSecurityOpenshiftIoV1SecurityContextConstraints', function() {
      it('should call patchSecurityOpenshiftIoV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test patchSecurityOpenshiftIoV1SecurityContextConstraints
        //instance.patchSecurityOpenshiftIoV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('readSecurityOpenshiftIoV1SecurityContextConstraints', function() {
      it('should call readSecurityOpenshiftIoV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test readSecurityOpenshiftIoV1SecurityContextConstraints
        //instance.readSecurityOpenshiftIoV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceSecurityOpenshiftIoV1SecurityContextConstraints', function() {
      it('should call replaceSecurityOpenshiftIoV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test replaceSecurityOpenshiftIoV1SecurityContextConstraints
        //instance.replaceSecurityOpenshiftIoV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchSecurityOpenshiftIoV1SecurityContextConstraints', function() {
      it('should call watchSecurityOpenshiftIoV1SecurityContextConstraints successfully', function(done) {
        //uncomment below and update the code to test watchSecurityOpenshiftIoV1SecurityContextConstraints
        //instance.watchSecurityOpenshiftIoV1SecurityContextConstraints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('watchSecurityOpenshiftIoV1SecurityContextConstraintsList', function() {
      it('should call watchSecurityOpenshiftIoV1SecurityContextConstraintsList successfully', function(done) {
        //uncomment below and update the code to test watchSecurityOpenshiftIoV1SecurityContextConstraintsList
        //instance.watchSecurityOpenshiftIoV1SecurityContextConstraintsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
